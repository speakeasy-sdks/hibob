/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

/**
 * Activity type.
 */
export enum Activity {
    PaidTimeoff = "paidTimeoff",
    UnpaidTimeoff = "unpaidTimeoff",
    WorkTime = "workTime",
}

export enum PolicyTypeUnit {
    Days = "days",
    Hours = "hours",
}

export type PolicyType = {
    /**
     * Activity type.
     */
    activity?: Activity | undefined;
    /**
     * Requests will be deducted from the balance only for working days.
     */
    bookingWorkDaysOnly?: boolean | undefined;
    name?: string | undefined;
    unit?: PolicyTypeUnit | undefined;
};

/** @internal */
export const Activity$ = z.nativeEnum(Activity);

/** @internal */
export const PolicyTypeUnit$ = z.nativeEnum(PolicyTypeUnit);

/** @internal */
export namespace PolicyType$ {
    export type Inbound = {
        activity?: Activity | undefined;
        bookingWorkDaysOnly?: boolean | undefined;
        name?: string | undefined;
        unit?: PolicyTypeUnit | undefined;
    };

    export const inboundSchema: z.ZodType<PolicyType, z.ZodTypeDef, Inbound> = z
        .object({
            activity: Activity$.optional(),
            bookingWorkDaysOnly: z.boolean().optional(),
            name: z.string().optional(),
            unit: PolicyTypeUnit$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.activity === undefined ? null : { activity: v.activity }),
                ...(v.bookingWorkDaysOnly === undefined
                    ? null
                    : { bookingWorkDaysOnly: v.bookingWorkDaysOnly }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.unit === undefined ? null : { unit: v.unit }),
            };
        });

    export type Outbound = {
        activity?: Activity | undefined;
        bookingWorkDaysOnly?: boolean | undefined;
        name?: string | undefined;
        unit?: PolicyTypeUnit | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PolicyType> = z
        .object({
            activity: Activity$.optional(),
            bookingWorkDaysOnly: z.boolean().optional(),
            name: z.string().optional(),
            unit: PolicyTypeUnit$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.activity === undefined ? null : { activity: v.activity }),
                ...(v.bookingWorkDaysOnly === undefined
                    ? null
                    : { bookingWorkDaysOnly: v.bookingWorkDaysOnly }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.unit === undefined ? null : { unit: v.unit }),
            };
        });
}
