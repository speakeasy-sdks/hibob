/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { RFCDate } from "../../../sdk/types";
import { z } from "zod";

/**
 * Adjustment type - balance or time used.
 */
export enum AdjustmentType {
    Balance = "balance",
    DaysUsed = "daysUsed",
}

export type AdjustmentRequest = {
    /**
     * Adjustment type - balance or time used.
     */
    adjustmentType?: AdjustmentType | undefined;
    /**
     * The amount of days/hours to add/subtract.
     */
    amount?: number | undefined;
    /**
     * The date this adjustment becomes effective.
     */
    effectiveDate?: RFCDate | undefined;
    /**
     * Policy type name.
     */
    policyType?: string | undefined;
    /**
     * A reason for this adjustment.
     */
    reason?: string | undefined;
};

/** @internal */
export const AdjustmentType$ = z.nativeEnum(AdjustmentType);

/** @internal */
export namespace AdjustmentRequest$ {
    export type Inbound = {
        adjustmentType?: AdjustmentType | undefined;
        amount?: number | undefined;
        effectiveDate?: string | undefined;
        policyType?: string | undefined;
        reason?: string | undefined;
    };

    export const inboundSchema: z.ZodType<AdjustmentRequest, z.ZodTypeDef, Inbound> = z
        .object({
            adjustmentType: AdjustmentType$.optional(),
            amount: z.number().optional(),
            effectiveDate: z
                .string()
                .transform((v) => new RFCDate(v))
                .optional(),
            policyType: z.string().optional(),
            reason: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.adjustmentType === undefined ? null : { adjustmentType: v.adjustmentType }),
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.effectiveDate === undefined ? null : { effectiveDate: v.effectiveDate }),
                ...(v.policyType === undefined ? null : { policyType: v.policyType }),
                ...(v.reason === undefined ? null : { reason: v.reason }),
            };
        });

    export type Outbound = {
        adjustmentType?: AdjustmentType | undefined;
        amount?: number | undefined;
        effectiveDate?: string | undefined;
        policyType?: string | undefined;
        reason?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AdjustmentRequest> = z
        .object({
            adjustmentType: AdjustmentType$.optional(),
            amount: z.number().optional(),
            effectiveDate: z
                .instanceof(RFCDate)
                .transform((v) => v.toString())
                .optional(),
            policyType: z.string().optional(),
            reason: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.adjustmentType === undefined ? null : { adjustmentType: v.adjustmentType }),
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.effectiveDate === undefined ? null : { effectiveDate: v.effectiveDate }),
                ...(v.policyType === undefined ? null : { policyType: v.policyType }),
                ...(v.reason === undefined ? null : { reason: v.reason }),
            };
        });
}
