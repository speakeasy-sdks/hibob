/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { EmployeeFilter, EmployeeFilter$ } from "./employeefilter";
import { z } from "zod";

export type ReadEmployeesRequestReference = {
    /**
     * Optional array of employee field paths that's are required in response. If you don't specify fields - only basic fields and categories are returned: <br/><b>Basic fields:</b>  <ul>
     *
     * @remarks
     *                       <li>ID</li>
     *                       <li>Company ID</li>
     *                       <li>Email</li>
     *                       <li>First name</li>
     *                       <li>Last name</li>
     *                       <li>Display name</li>
     *                       <li>Middle name</li>
     *                       <li>Creation timestamp</li>
     *                       <li>Avatar URL</li>
     * </ul> <br/><b>Basic Categories:</b> <ul>
     *                       <li>About</li>
     *                       <li>Employment</li>
     *                       <li>Work</li>
     * </ul>
     */
    fields?: Array<string> | undefined;
    /**
     * Optional list of filters for filtering employees. We currently support up to one filter.
     */
    filters?: Array<EmployeeFilter> | undefined;
    /**
     * Optional field.  <br> <b>If not sent:</b> supply machine-readable values only. <br> <br> Possible values: <br>  <br> <b>APPEND</b> - include the additional "humanReadable" JSON node in the response. <br>  <br> <b>REPLACE</b> - supply humanReadable values in JSON instead of machine-readable format. <br>
     */
    humanReadable?: string | undefined;
    /**
     * <br>Optional field. <br>Default value = false. <br>Defines whether response should include inactive employees.
     */
    showInactive?: boolean | undefined;
};

/** @internal */
export namespace ReadEmployeesRequestReference$ {
    export type Inbound = {
        fields?: Array<string> | undefined;
        filters?: Array<EmployeeFilter$.Inbound> | undefined;
        humanReadable?: string | undefined;
        showInactive?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<ReadEmployeesRequestReference, z.ZodTypeDef, Inbound> = z
        .object({
            fields: z.array(z.string()).optional(),
            filters: z.array(EmployeeFilter$.inboundSchema).optional(),
            humanReadable: z.string().optional(),
            showInactive: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.fields === undefined ? null : { fields: v.fields }),
                ...(v.filters === undefined ? null : { filters: v.filters }),
                ...(v.humanReadable === undefined ? null : { humanReadable: v.humanReadable }),
                ...(v.showInactive === undefined ? null : { showInactive: v.showInactive }),
            };
        });

    export type Outbound = {
        fields?: Array<string> | undefined;
        filters?: Array<EmployeeFilter$.Outbound> | undefined;
        humanReadable?: string | undefined;
        showInactive?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ReadEmployeesRequestReference> =
        z
            .object({
                fields: z.array(z.string()).optional(),
                filters: z.array(EmployeeFilter$.outboundSchema).optional(),
                humanReadable: z.string().optional(),
                showInactive: z.boolean().optional(),
            })
            .transform((v) => {
                return {
                    ...(v.fields === undefined ? null : { fields: v.fields }),
                    ...(v.filters === undefined ? null : { filters: v.filters }),
                    ...(v.humanReadable === undefined ? null : { humanReadable: v.humanReadable }),
                    ...(v.showInactive === undefined ? null : { showInactive: v.showInactive }),
                };
            });
}
