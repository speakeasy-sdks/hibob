/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { FilterInstruction, FilterInstruction$ } from "./filterinstruction";
import { z } from "zod";

export type GetPositionsRequest = {
    /**
     * Array of field ids (paths) to fetch for the positions.<br /> Minimum 1 up to 50 fields. Any invalid number of fields will get a response of 400 HTTP error.<br /> You can include only the field ids listed in the [Positions Fields Metadata API](https://apidocs.hibob.com/reference/get_metadata-objects-position).
     */
    fields: Array<string>;
    filters: Array<FilterInstruction>;
    /**
     * Whether to include the additional "humanReadable" entry in the response.
     */
    includeHumanReadable?: boolean | undefined;
};

/** @internal */
export namespace GetPositionsRequest$ {
    export type Inbound = {
        fields: Array<string>;
        filters: Array<FilterInstruction$.Inbound>;
        includeHumanReadable?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<GetPositionsRequest, z.ZodTypeDef, Inbound> = z
        .object({
            fields: z.array(z.string()),
            filters: z.array(FilterInstruction$.inboundSchema),
            includeHumanReadable: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                fields: v.fields,
                filters: v.filters,
                ...(v.includeHumanReadable === undefined
                    ? null
                    : { includeHumanReadable: v.includeHumanReadable }),
            };
        });

    export type Outbound = {
        fields: Array<string>;
        filters: Array<FilterInstruction$.Outbound>;
        includeHumanReadable?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetPositionsRequest> = z
        .object({
            fields: z.array(z.string()),
            filters: z.array(FilterInstruction$.outboundSchema),
            includeHumanReadable: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                fields: v.fields,
                filters: v.filters,
                ...(v.includeHumanReadable === undefined
                    ? null
                    : { includeHumanReadable: v.includeHumanReadable }),
            };
        });
}
