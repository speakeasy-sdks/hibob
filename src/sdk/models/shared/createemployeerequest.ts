/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { RFCDate } from "../../types";
import * as z from "zod";

export type Work = {
    /**
     * The employee's site.
     */
    site: string;
    /**
     * The employee's employment start date
     */
    startDate: RFCDate;
};

export type CreateEmployeeRequest = {
    /**
     * Employee's email address.
     */
    email: string;
    /**
     * Employee's first name.
     */
    firstName: string;
    /**
     * Employee's surname.
     */
    surname: string;
    work?: Work | undefined;
};

/** @internal */
export namespace Work$ {
    export type Inbound = {
        site: string;
        startDate: string;
    };

    export const inboundSchema: z.ZodType<Work, z.ZodTypeDef, Inbound> = z
        .object({
            site: z.string(),
            startDate: z.string().transform((v) => new RFCDate(v)),
        })
        .transform((v) => {
            return {
                site: v.site,
                startDate: v.startDate,
            };
        });

    export type Outbound = {
        site: string;
        startDate: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Work> = z
        .object({
            site: z.string(),
            startDate: z.instanceof(RFCDate).transform((v) => v.toString()),
        })
        .transform((v) => {
            return {
                site: v.site,
                startDate: v.startDate,
            };
        });
}

/** @internal */
export namespace CreateEmployeeRequest$ {
    export type Inbound = {
        email: string;
        firstName: string;
        surname: string;
        work?: Work$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<CreateEmployeeRequest, z.ZodTypeDef, Inbound> = z
        .object({
            email: z.string(),
            firstName: z.string(),
            surname: z.string(),
            work: z.lazy(() => Work$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                email: v.email,
                firstName: v.firstName,
                surname: v.surname,
                ...(v.work === undefined ? null : { work: v.work }),
            };
        });

    export type Outbound = {
        email: string;
        firstName: string;
        surname: string;
        work?: Work$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateEmployeeRequest> = z
        .object({
            email: z.string(),
            firstName: z.string(),
            surname: z.string(),
            work: z.lazy(() => Work$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                email: v.email,
                firstName: v.firstName,
                surname: v.surname,
                ...(v.work === undefined ? null : { work: v.work }),
            };
        });
}
