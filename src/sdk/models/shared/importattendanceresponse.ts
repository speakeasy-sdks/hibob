/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Import status
 */
export enum Status {
    Success = "success",
    Failed = "failed",
    PartialSuccess = "partial_success",
}

export type ImportAttendanceResponse = {
    /**
     * List of all errors received in the process
     */
    errors?: Array<string> | undefined;
    /**
     * Number of clock-in/clock-out events imported
     */
    imported?: number | undefined;
    /**
     * Number of clock-in/clock-out events which were not imported
     */
    notImported?: number | undefined;
    /**
     * Import status
     */
    status?: Status | undefined;
    /**
     * Total number of clock-in and clock-out events received
     */
    total?: number | undefined;
};

/** @internal */
export const Status$ = z.nativeEnum(Status);

/** @internal */
export namespace ImportAttendanceResponse$ {
    export type Inbound = {
        errors?: Array<string> | undefined;
        imported?: number | undefined;
        notImported?: number | undefined;
        status?: Status | undefined;
        total?: number | undefined;
    };

    export const inboundSchema: z.ZodType<ImportAttendanceResponse, z.ZodTypeDef, Inbound> = z
        .object({
            errors: z.array(z.string()).optional(),
            imported: z.number().optional(),
            notImported: z.number().optional(),
            status: Status$.optional(),
            total: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.errors === undefined ? null : { errors: v.errors }),
                ...(v.imported === undefined ? null : { imported: v.imported }),
                ...(v.notImported === undefined ? null : { notImported: v.notImported }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.total === undefined ? null : { total: v.total }),
            };
        });

    export type Outbound = {
        errors?: Array<string> | undefined;
        imported?: number | undefined;
        notImported?: number | undefined;
        status?: Status | undefined;
        total?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ImportAttendanceResponse> = z
        .object({
            errors: z.array(z.string()).optional(),
            imported: z.number().optional(),
            notImported: z.number().optional(),
            status: Status$.optional(),
            total: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.errors === undefined ? null : { errors: v.errors }),
                ...(v.imported === undefined ? null : { imported: v.imported }),
                ...(v.notImported === undefined ? null : { notImported: v.notImported }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.total === undefined ? null : { total: v.total }),
            };
        });
}
