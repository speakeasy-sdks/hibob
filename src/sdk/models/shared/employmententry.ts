/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { RFCDate } from "../../../sdk/types";
import * as z from "zod";

export type EmploymentEntry = {
    /**
     * Contract.
     */
    contract?: string | undefined;
    /**
     * The date this entry becomes effective.
     */
    effectiveDate: RFCDate;
    /**
     * ID.
     */
    id?: number | undefined;
    /**
     * The reason for this change.
     */
    reason?: string | undefined;
    /**
     * Salary pay type.
     */
    salaryPayType?: string | undefined;
    /**
     * Type.
     */
    type?: string | undefined;
};

/** @internal */
export namespace EmploymentEntry$ {
    export type Inbound = {
        contract?: string | undefined;
        effectiveDate: string;
        id?: number | undefined;
        reason?: string | undefined;
        salaryPayType?: string | undefined;
        type?: string | undefined;
    };

    export const inboundSchema: z.ZodType<EmploymentEntry, z.ZodTypeDef, Inbound> = z
        .object({
            contract: z.string().optional(),
            effectiveDate: z.string().transform((v) => new RFCDate(v)),
            id: z.number().int().optional(),
            reason: z.string().optional(),
            salaryPayType: z.string().optional(),
            type: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.contract === undefined ? null : { contract: v.contract }),
                effectiveDate: v.effectiveDate,
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.reason === undefined ? null : { reason: v.reason }),
                ...(v.salaryPayType === undefined ? null : { salaryPayType: v.salaryPayType }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });

    export type Outbound = {
        contract?: string | undefined;
        effectiveDate: string;
        id?: number | undefined;
        reason?: string | undefined;
        salaryPayType?: string | undefined;
        type?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmploymentEntry> = z
        .object({
            contract: z.string().optional(),
            effectiveDate: z.instanceof(RFCDate).transform((v) => v.toString()),
            id: z.number().int().optional(),
            reason: z.string().optional(),
            salaryPayType: z.string().optional(),
            type: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.contract === undefined ? null : { contract: v.contract }),
                effectiveDate: v.effectiveDate,
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.reason === undefined ? null : { reason: v.reason }),
                ...(v.salaryPayType === undefined ? null : { salaryPayType: v.salaryPayType }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });
}
