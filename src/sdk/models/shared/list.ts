/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ListItem, ListItem$ } from "./listitem";
import * as z from "zod";

export type List = {
    /**
     * The elements in the list.
     */
    items?: Array<ListItem> | undefined;
    /**
     * The name of the list
     */
    name?: string | undefined;
};

/** @internal */
export namespace List$ {
    export type Inbound = {
        items?: Array<ListItem$.Inbound> | undefined;
        name?: string | undefined;
    };

    export const inboundSchema: z.ZodType<List, z.ZodTypeDef, Inbound> = z
        .object({
            items: z.array(ListItem$.inboundSchema).optional(),
            name: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.items === undefined ? null : { items: v.items }),
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });

    export type Outbound = {
        items?: Array<ListItem$.Outbound> | undefined;
        name?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, List> = z
        .object({
            items: z.array(ListItem$.outboundSchema).optional(),
            name: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.items === undefined ? null : { items: v.items }),
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });
}
