/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { EmployeeProfile, EmployeeProfile$ } from "./employeeprofile";
import { z } from "zod";

export type EmployeesProfiles = {
    employees?: Array<EmployeeProfile> | undefined;
};

/** @internal */
export namespace EmployeesProfiles$ {
    export type Inbound = {
        employees?: Array<EmployeeProfile$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<EmployeesProfiles, z.ZodTypeDef, Inbound> = z
        .object({
            employees: z.array(EmployeeProfile$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.employees === undefined ? null : { employees: v.employees }),
            };
        });

    export type Outbound = {
        employees?: Array<EmployeeProfile$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmployeesProfiles> = z
        .object({
            employees: z.array(EmployeeProfile$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.employees === undefined ? null : { employees: v.employees }),
            };
        });
}
