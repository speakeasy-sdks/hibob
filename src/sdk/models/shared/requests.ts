/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Request, Request$ } from "./request";
import * as z from "zod";

export type Requests = {
    outs?: Array<Request> | undefined;
};

/** @internal */
export namespace Requests$ {
    export type Inbound = {
        outs?: Array<Request$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<Requests, z.ZodTypeDef, Inbound> = z
        .object({
            outs: z.array(Request$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.outs === undefined ? null : { outs: v.outs }),
            };
        });

    export type Outbound = {
        outs?: Array<Request$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Requests> = z
        .object({
            outs: z.array(Request$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.outs === undefined ? null : { outs: v.outs }),
            };
        });
}
