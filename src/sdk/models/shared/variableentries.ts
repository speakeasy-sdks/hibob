/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { VariableEntry, VariableEntry$ } from "./variableentry";
import * as z from "zod";

export type VariableEntries = {
    values?: Array<VariableEntry> | undefined;
};

/** @internal */
export namespace VariableEntries$ {
    export type Inbound = {
        values?: Array<VariableEntry$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<VariableEntries, z.ZodTypeDef, Inbound> = z
        .object({
            values: z.array(VariableEntry$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.values === undefined ? null : { values: v.values }),
            };
        });

    export type Outbound = {
        values?: Array<VariableEntry$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, VariableEntries> = z
        .object({
            values: z.array(VariableEntry$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.values === undefined ? null : { values: v.values }),
            };
        });
}
