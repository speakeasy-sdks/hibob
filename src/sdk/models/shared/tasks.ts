/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Task, Task$ } from "./task";
import { z } from "zod";

export type Tasks = {
    tasks?: Array<Task> | undefined;
};

/** @internal */
export namespace Tasks$ {
    export type Inbound = {
        tasks?: Array<Task$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<Tasks, z.ZodTypeDef, Inbound> = z
        .object({
            tasks: z.array(Task$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.tasks === undefined ? null : { tasks: v.tasks }),
            };
        });

    export type Outbound = {
        tasks?: Array<Task$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Tasks> = z
        .object({
            tasks: z.array(Task$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.tasks === undefined ? null : { tasks: v.tasks }),
            };
        });
}
