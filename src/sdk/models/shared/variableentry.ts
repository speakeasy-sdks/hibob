/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { RFCDate } from "../../../sdk/types";
import { CurrencyValue, CurrencyValue$ } from "./currencyvalue";
import * as z from "zod";

export type VariableEntry = {
    amount: CurrencyValue;
    /**
     * The employee's company on-target weight, in percent.
     */
    companyPercent?: number | undefined;
    /**
     * The employee's department on-target weight, in percent.
     */
    departmentPercent?: number | undefined;
    /**
     * The date this entry becomes effective.
     */
    effectiveDate: RFCDate;
    /**
     * ID.
     */
    id?: number | undefined;
    /**
     * The employee's individual on-target weight, in percent.
     */
    individualPercent?: number | undefined;
    /**
     * This represents the period for this variable entry. It can be one of: Annual, Half-Yearly, Quarterly, Monthly.
     */
    paymentPeriod: string;
    /**
     * The reason for this change.
     */
    reason?: string | undefined;
    /**
     * The type of variable pay.
     */
    variableType?: string | undefined;
};

/** @internal */
export namespace VariableEntry$ {
    export type Inbound = {
        amount: CurrencyValue$.Inbound;
        companyPercent?: number | undefined;
        departmentPercent?: number | undefined;
        effectiveDate: string;
        id?: number | undefined;
        individualPercent?: number | undefined;
        paymentPeriod: string;
        reason?: string | undefined;
        variableType?: string | undefined;
    };

    export const inboundSchema: z.ZodType<VariableEntry, z.ZodTypeDef, Inbound> = z
        .object({
            amount: CurrencyValue$.inboundSchema,
            companyPercent: z.number().optional(),
            departmentPercent: z.number().optional(),
            effectiveDate: z.string().transform((v) => new RFCDate(v)),
            id: z.number().int().optional(),
            individualPercent: z.number().optional(),
            paymentPeriod: z.string(),
            reason: z.string().optional(),
            variableType: z.string().optional(),
        })
        .transform((v) => {
            return {
                amount: v.amount,
                ...(v.companyPercent === undefined ? null : { companyPercent: v.companyPercent }),
                ...(v.departmentPercent === undefined
                    ? null
                    : { departmentPercent: v.departmentPercent }),
                effectiveDate: v.effectiveDate,
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.individualPercent === undefined
                    ? null
                    : { individualPercent: v.individualPercent }),
                paymentPeriod: v.paymentPeriod,
                ...(v.reason === undefined ? null : { reason: v.reason }),
                ...(v.variableType === undefined ? null : { variableType: v.variableType }),
            };
        });

    export type Outbound = {
        amount: CurrencyValue$.Outbound;
        companyPercent?: number | undefined;
        departmentPercent?: number | undefined;
        effectiveDate: string;
        id?: number | undefined;
        individualPercent?: number | undefined;
        paymentPeriod: string;
        reason?: string | undefined;
        variableType?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, VariableEntry> = z
        .object({
            amount: CurrencyValue$.outboundSchema,
            companyPercent: z.number().optional(),
            departmentPercent: z.number().optional(),
            effectiveDate: z.instanceof(RFCDate).transform((v) => v.toString()),
            id: z.number().int().optional(),
            individualPercent: z.number().optional(),
            paymentPeriod: z.string(),
            reason: z.string().optional(),
            variableType: z.string().optional(),
        })
        .transform((v) => {
            return {
                amount: v.amount,
                ...(v.companyPercent === undefined ? null : { companyPercent: v.companyPercent }),
                ...(v.departmentPercent === undefined
                    ? null
                    : { departmentPercent: v.departmentPercent }),
                effectiveDate: v.effectiveDate,
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.individualPercent === undefined
                    ? null
                    : { individualPercent: v.individualPercent }),
                paymentPeriod: v.paymentPeriod,
                ...(v.reason === undefined ? null : { reason: v.reason }),
                ...(v.variableType === undefined ? null : { variableType: v.variableType }),
            };
        });
}
