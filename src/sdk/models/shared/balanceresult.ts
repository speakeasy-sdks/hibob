/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { RFCDate } from "../../../sdk/types";
import * as z from "zod";

export type BalanceResult = {
    /**
     * Annual allowance.
     */
    annualAllowance?: number | undefined;
    /**
     * Employee ID.
     */
    employeeId?: string | undefined;
    /**
     * The balance date.
     */
    pointInTime?: RFCDate | undefined;
    /**
     * Policy name.
     */
    policy?: string | undefined;
    /**
     * The balance as of the cycle start date.
     */
    startingBalance?: number | undefined;
    /**
     * The cycle start date.
     */
    startingBalanceAsOf?: RFCDate | undefined;
    /**
     * Total number of days/hours manually adjusted.
     */
    totalAdminAdjustments?: number | undefined;
    /**
     * The retrieved balance as of this date.
     */
    totalBalanceAsOfDate?: number | undefined;
    /**
     * The retrieved rounded balance as of this date.
     */
    totalRoundedBalanceAsOfDate?: number | undefined;
    /**
     * Total number of days/hours adjusted.
     */
    totalSystemAdjustments?: number | undefined;
    /**
     * Total number of days/hours taken.
     */
    totalTaken?: number | undefined;
};

/** @internal */
export namespace BalanceResult$ {
    export type Inbound = {
        annualAllowance?: number | undefined;
        employeeId?: string | undefined;
        pointInTime?: string | undefined;
        policy?: string | undefined;
        startingBalance?: number | undefined;
        startingBalanceAsOf?: string | undefined;
        totalAdminAdjustments?: number | undefined;
        totalBalanceAsOfDate?: number | undefined;
        totalRoundedBalanceAsOfDate?: number | undefined;
        totalSystemAdjustments?: number | undefined;
        totalTaken?: number | undefined;
    };

    export const inboundSchema: z.ZodType<BalanceResult, z.ZodTypeDef, Inbound> = z
        .object({
            annualAllowance: z.number().optional(),
            employeeId: z.string().optional(),
            pointInTime: z
                .string()
                .transform((v) => new RFCDate(v))
                .optional(),
            policy: z.string().optional(),
            startingBalance: z.number().optional(),
            startingBalanceAsOf: z
                .string()
                .transform((v) => new RFCDate(v))
                .optional(),
            totalAdminAdjustments: z.number().optional(),
            totalBalanceAsOfDate: z.number().optional(),
            totalRoundedBalanceAsOfDate: z.number().optional(),
            totalSystemAdjustments: z.number().optional(),
            totalTaken: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.annualAllowance === undefined
                    ? null
                    : { annualAllowance: v.annualAllowance }),
                ...(v.employeeId === undefined ? null : { employeeId: v.employeeId }),
                ...(v.pointInTime === undefined ? null : { pointInTime: v.pointInTime }),
                ...(v.policy === undefined ? null : { policy: v.policy }),
                ...(v.startingBalance === undefined
                    ? null
                    : { startingBalance: v.startingBalance }),
                ...(v.startingBalanceAsOf === undefined
                    ? null
                    : { startingBalanceAsOf: v.startingBalanceAsOf }),
                ...(v.totalAdminAdjustments === undefined
                    ? null
                    : { totalAdminAdjustments: v.totalAdminAdjustments }),
                ...(v.totalBalanceAsOfDate === undefined
                    ? null
                    : { totalBalanceAsOfDate: v.totalBalanceAsOfDate }),
                ...(v.totalRoundedBalanceAsOfDate === undefined
                    ? null
                    : { totalRoundedBalanceAsOfDate: v.totalRoundedBalanceAsOfDate }),
                ...(v.totalSystemAdjustments === undefined
                    ? null
                    : { totalSystemAdjustments: v.totalSystemAdjustments }),
                ...(v.totalTaken === undefined ? null : { totalTaken: v.totalTaken }),
            };
        });

    export type Outbound = {
        annualAllowance?: number | undefined;
        employeeId?: string | undefined;
        pointInTime?: string | undefined;
        policy?: string | undefined;
        startingBalance?: number | undefined;
        startingBalanceAsOf?: string | undefined;
        totalAdminAdjustments?: number | undefined;
        totalBalanceAsOfDate?: number | undefined;
        totalRoundedBalanceAsOfDate?: number | undefined;
        totalSystemAdjustments?: number | undefined;
        totalTaken?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, BalanceResult> = z
        .object({
            annualAllowance: z.number().optional(),
            employeeId: z.string().optional(),
            pointInTime: z
                .instanceof(RFCDate)
                .transform((v) => v.toString())
                .optional(),
            policy: z.string().optional(),
            startingBalance: z.number().optional(),
            startingBalanceAsOf: z
                .instanceof(RFCDate)
                .transform((v) => v.toString())
                .optional(),
            totalAdminAdjustments: z.number().optional(),
            totalBalanceAsOfDate: z.number().optional(),
            totalRoundedBalanceAsOfDate: z.number().optional(),
            totalSystemAdjustments: z.number().optional(),
            totalTaken: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.annualAllowance === undefined
                    ? null
                    : { annualAllowance: v.annualAllowance }),
                ...(v.employeeId === undefined ? null : { employeeId: v.employeeId }),
                ...(v.pointInTime === undefined ? null : { pointInTime: v.pointInTime }),
                ...(v.policy === undefined ? null : { policy: v.policy }),
                ...(v.startingBalance === undefined
                    ? null
                    : { startingBalance: v.startingBalance }),
                ...(v.startingBalanceAsOf === undefined
                    ? null
                    : { startingBalanceAsOf: v.startingBalanceAsOf }),
                ...(v.totalAdminAdjustments === undefined
                    ? null
                    : { totalAdminAdjustments: v.totalAdminAdjustments }),
                ...(v.totalBalanceAsOfDate === undefined
                    ? null
                    : { totalBalanceAsOfDate: v.totalBalanceAsOfDate }),
                ...(v.totalRoundedBalanceAsOfDate === undefined
                    ? null
                    : { totalRoundedBalanceAsOfDate: v.totalRoundedBalanceAsOfDate }),
                ...(v.totalSystemAdjustments === undefined
                    ? null
                    : { totalSystemAdjustments: v.totalSystemAdjustments }),
                ...(v.totalTaken === undefined ? null : { totalTaken: v.totalTaken }),
            };
        });
}
