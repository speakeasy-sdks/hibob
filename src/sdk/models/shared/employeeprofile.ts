/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AboutPart, AboutPart$ } from "./aboutpart";
import { PersonalPart, PersonalPart$ } from "./personalpart";
import { WorkPart, WorkPart$ } from "./workpart";
import { z } from "zod";

export type EmployeeProfile = {
    about?: AboutPart | undefined;
    /**
     * The employee's display name. This defaults to first name & last name but can be customized.
     */
    displayName?: string | undefined;
    /**
     * Employee's email address.
     */
    email?: string | undefined;
    /**
     * Employee's first name.
     */
    firstName?: string | undefined;
    /**
     * A unique identifier representing a specific employee.
     */
    id?: string | undefined;
    personal?: PersonalPart | undefined;
    /**
     * Employee's surname.
     */
    surname?: string | undefined;
    work?: WorkPart | undefined;
};

/** @internal */
export namespace EmployeeProfile$ {
    export type Inbound = {
        about?: AboutPart$.Inbound | undefined;
        displayName?: string | undefined;
        email?: string | undefined;
        firstName?: string | undefined;
        id?: string | undefined;
        personal?: PersonalPart$.Inbound | undefined;
        surname?: string | undefined;
        work?: WorkPart$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<EmployeeProfile, z.ZodTypeDef, Inbound> = z
        .object({
            about: AboutPart$.inboundSchema.optional(),
            displayName: z.string().optional(),
            email: z.string().optional(),
            firstName: z.string().optional(),
            id: z.string().optional(),
            personal: PersonalPart$.inboundSchema.optional(),
            surname: z.string().optional(),
            work: WorkPart$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.about === undefined ? null : { about: v.about }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.personal === undefined ? null : { personal: v.personal }),
                ...(v.surname === undefined ? null : { surname: v.surname }),
                ...(v.work === undefined ? null : { work: v.work }),
            };
        });

    export type Outbound = {
        about?: AboutPart$.Outbound | undefined;
        displayName?: string | undefined;
        email?: string | undefined;
        firstName?: string | undefined;
        id?: string | undefined;
        personal?: PersonalPart$.Outbound | undefined;
        surname?: string | undefined;
        work?: WorkPart$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmployeeProfile> = z
        .object({
            about: AboutPart$.outboundSchema.optional(),
            displayName: z.string().optional(),
            email: z.string().optional(),
            firstName: z.string().optional(),
            id: z.string().optional(),
            personal: PersonalPart$.outboundSchema.optional(),
            surname: z.string().optional(),
            work: WorkPart$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.about === undefined ? null : { about: v.about }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.personal === undefined ? null : { personal: v.personal }),
                ...(v.surname === undefined ? null : { surname: v.surname }),
                ...(v.work === undefined ? null : { work: v.work }),
            };
        });
}
