/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * An event indicating clock-in, clock-out or both
 */
export type ImportAttendanceEvent = {
    /**
     * The timestamp to log as a clock-in date-time in local time
     */
    clockIn?: string | undefined;
    /**
     * The timestamp to log as a clock-out date-time in local time.
     */
    clockOut?: string | undefined;
    /**
     * The id value to identify the customer by. Will fetch the employee based on the field (type) selected in <i>idType</i>.
     */
    id: string;
};

/** @internal */
export namespace ImportAttendanceEvent$ {
    export type Inbound = {
        clockIn?: string | undefined;
        clockOut?: string | undefined;
        id: string;
    };

    export const inboundSchema: z.ZodType<ImportAttendanceEvent, z.ZodTypeDef, Inbound> = z
        .object({
            clockIn: z.string().optional(),
            clockOut: z.string().optional(),
            id: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.clockIn === undefined ? null : { clockIn: v.clockIn }),
                ...(v.clockOut === undefined ? null : { clockOut: v.clockOut }),
                id: v.id,
            };
        });

    export type Outbound = {
        clockIn?: string | undefined;
        clockOut?: string | undefined;
        id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ImportAttendanceEvent> = z
        .object({
            clockIn: z.string().optional(),
            clockOut: z.string().optional(),
            id: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.clockIn === undefined ? null : { clockIn: v.clockIn }),
                ...(v.clockOut === undefined ? null : { clockOut: v.clockOut }),
                id: v.id,
            };
        });
}
