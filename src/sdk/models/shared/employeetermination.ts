/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { RFCDate } from "../../../sdk/types";
import { z } from "zod";

export enum EmployeeTerminationUnit {
    Days = "days",
    Weeks = "weeks",
    Month = "month",
    Years = "years",
}

/**
 * Notice period length
 */
export type NoticePeriod = {
    length?: number | undefined;
    unit?: EmployeeTerminationUnit | undefined;
};

export type EmployeeTermination = {
    lastDayOfWork?: RFCDate | undefined;
    /**
     * Notice period length
     */
    noticePeriod?: NoticePeriod | undefined;
    /**
     * The ID of the 'lifecycleReasonType' list entry
     */
    reasonType?: string | undefined;
    /**
     * The employee's termination date
     */
    terminationDate: RFCDate;
    /**
     * The ID of the 'terminationReason' list entry
     */
    terminationReason?: string | undefined;
};

/** @internal */
export const EmployeeTerminationUnit$ = z.nativeEnum(EmployeeTerminationUnit);

/** @internal */
export namespace NoticePeriod$ {
    export type Inbound = {
        length?: number | undefined;
        unit?: EmployeeTerminationUnit | undefined;
    };

    export const inboundSchema: z.ZodType<NoticePeriod, z.ZodTypeDef, Inbound> = z
        .object({
            length: z.number().int().optional(),
            unit: EmployeeTerminationUnit$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.length === undefined ? null : { length: v.length }),
                ...(v.unit === undefined ? null : { unit: v.unit }),
            };
        });

    export type Outbound = {
        length?: number | undefined;
        unit?: EmployeeTerminationUnit | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, NoticePeriod> = z
        .object({
            length: z.number().int().optional(),
            unit: EmployeeTerminationUnit$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.length === undefined ? null : { length: v.length }),
                ...(v.unit === undefined ? null : { unit: v.unit }),
            };
        });
}

/** @internal */
export namespace EmployeeTermination$ {
    export type Inbound = {
        lastDayOfWork?: string | undefined;
        noticePeriod?: NoticePeriod$.Inbound | undefined;
        reasonType?: string | undefined;
        terminationDate: string;
        terminationReason?: string | undefined;
    };

    export const inboundSchema: z.ZodType<EmployeeTermination, z.ZodTypeDef, Inbound> = z
        .object({
            lastDayOfWork: z
                .string()
                .transform((v) => new RFCDate(v))
                .optional(),
            noticePeriod: z.lazy(() => NoticePeriod$.inboundSchema).optional(),
            reasonType: z.string().optional(),
            terminationDate: z.string().transform((v) => new RFCDate(v)),
            terminationReason: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.lastDayOfWork === undefined ? null : { lastDayOfWork: v.lastDayOfWork }),
                ...(v.noticePeriod === undefined ? null : { noticePeriod: v.noticePeriod }),
                ...(v.reasonType === undefined ? null : { reasonType: v.reasonType }),
                terminationDate: v.terminationDate,
                ...(v.terminationReason === undefined
                    ? null
                    : { terminationReason: v.terminationReason }),
            };
        });

    export type Outbound = {
        lastDayOfWork?: string | undefined;
        noticePeriod?: NoticePeriod$.Outbound | undefined;
        reasonType?: string | undefined;
        terminationDate: string;
        terminationReason?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmployeeTermination> = z
        .object({
            lastDayOfWork: z
                .instanceof(RFCDate)
                .transform((v) => v.toString())
                .optional(),
            noticePeriod: z.lazy(() => NoticePeriod$.outboundSchema).optional(),
            reasonType: z.string().optional(),
            terminationDate: z.instanceof(RFCDate).transform((v) => v.toString()),
            terminationReason: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.lastDayOfWork === undefined ? null : { lastDayOfWork: v.lastDayOfWork }),
                ...(v.noticePeriod === undefined ? null : { noticePeriod: v.noticePeriod }),
                ...(v.reasonType === undefined ? null : { reasonType: v.reasonType }),
                terminationDate: v.terminationDate,
                ...(v.terminationReason === undefined
                    ? null
                    : { terminationReason: v.terminationReason }),
            };
        });
}
