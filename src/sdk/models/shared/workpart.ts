/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { RFCDate } from "../../types";
import { EmployeeReference, EmployeeReference$ } from "./employeereference";
import * as z from "zod";

export type WorkPart = {
    /**
     * The employee's description.
     */
    department?: string | undefined;
    reportsTo?: EmployeeReference | undefined;
    /**
     * The employee's site.
     */
    site?: string | undefined;
    /**
     * The employee's employment start date
     */
    startDate?: RFCDate | undefined;
    /**
     * The employee's title.
     */
    title?: string | undefined;
};

/** @internal */
export namespace WorkPart$ {
    export type Inbound = {
        department?: string | undefined;
        reportsTo?: EmployeeReference$.Inbound | undefined;
        site?: string | undefined;
        startDate?: string | undefined;
        title?: string | undefined;
    };

    export const inboundSchema: z.ZodType<WorkPart, z.ZodTypeDef, Inbound> = z
        .object({
            department: z.string().optional(),
            reportsTo: EmployeeReference$.inboundSchema.optional(),
            site: z.string().optional(),
            startDate: z
                .string()
                .transform((v) => new RFCDate(v))
                .optional(),
            title: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.department === undefined ? null : { department: v.department }),
                ...(v.reportsTo === undefined ? null : { reportsTo: v.reportsTo }),
                ...(v.site === undefined ? null : { site: v.site }),
                ...(v.startDate === undefined ? null : { startDate: v.startDate }),
                ...(v.title === undefined ? null : { title: v.title }),
            };
        });

    export type Outbound = {
        department?: string | undefined;
        reportsTo?: EmployeeReference$.Outbound | undefined;
        site?: string | undefined;
        startDate?: string | undefined;
        title?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, WorkPart> = z
        .object({
            department: z.string().optional(),
            reportsTo: EmployeeReference$.outboundSchema.optional(),
            site: z.string().optional(),
            startDate: z
                .instanceof(RFCDate)
                .transform((v) => v.toString())
                .optional(),
            title: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.department === undefined ? null : { department: v.department }),
                ...(v.reportsTo === undefined ? null : { reportsTo: v.reportsTo }),
                ...(v.site === undefined ? null : { site: v.site }),
                ...(v.startDate === undefined ? null : { startDate: v.startDate }),
                ...(v.title === undefined ? null : { title: v.title }),
            };
        });
}
