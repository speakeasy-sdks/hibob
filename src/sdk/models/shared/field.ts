/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type FieldTypeData = {
    /**
     * The ID of the list in the /v1/company/named-lists endpoint.
     */
    listId?: string | undefined;
};

export type Field = {
    /**
     * Category of the field.
     */
    category?: string | undefined;
    /**
     * Description of the field.
     */
    description?: string | undefined;
    /**
     * When true, this field keeps the history of its values, each being active starting from a certain date. The default value is false.
     */
    historical?: boolean | undefined;
    /**
     * ID of the field.
     */
    id?: string | undefined;
    /**
     * A dot-separated path of this field value in the employee JSON returned by the /v1/profiles endpoint.
     */
    jsonPath?: string | undefined;
    /**
     * Name of the field.
     */
    name?: string | undefined;
    /**
     * The type of the field. Supported field types: text, text-area, number, date, list, multi-list, hierarchy-list, currency, employee-reference, document.
     */
    type?: string | undefined;
    typeData?: FieldTypeData | undefined;
};

/** @internal */
export namespace FieldTypeData$ {
    export type Inbound = {
        listId?: string | undefined;
    };

    export const inboundSchema: z.ZodType<FieldTypeData, z.ZodTypeDef, Inbound> = z
        .object({
            listId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.listId === undefined ? null : { listId: v.listId }),
            };
        });

    export type Outbound = {
        listId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FieldTypeData> = z
        .object({
            listId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.listId === undefined ? null : { listId: v.listId }),
            };
        });
}

/** @internal */
export namespace Field$ {
    export type Inbound = {
        category?: string | undefined;
        description?: string | undefined;
        historical?: boolean | undefined;
        id?: string | undefined;
        jsonPath?: string | undefined;
        name?: string | undefined;
        type?: string | undefined;
        typeData?: FieldTypeData$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<Field, z.ZodTypeDef, Inbound> = z
        .object({
            category: z.string().optional(),
            description: z.string().optional(),
            historical: z.boolean().optional(),
            id: z.string().optional(),
            jsonPath: z.string().optional(),
            name: z.string().optional(),
            type: z.string().optional(),
            typeData: z.lazy(() => FieldTypeData$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.category === undefined ? null : { category: v.category }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.historical === undefined ? null : { historical: v.historical }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.jsonPath === undefined ? null : { jsonPath: v.jsonPath }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.typeData === undefined ? null : { typeData: v.typeData }),
            };
        });

    export type Outbound = {
        category?: string | undefined;
        description?: string | undefined;
        historical?: boolean | undefined;
        id?: string | undefined;
        jsonPath?: string | undefined;
        name?: string | undefined;
        type?: string | undefined;
        typeData?: FieldTypeData$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Field> = z
        .object({
            category: z.string().optional(),
            description: z.string().optional(),
            historical: z.boolean().optional(),
            id: z.string().optional(),
            jsonPath: z.string().optional(),
            name: z.string().optional(),
            type: z.string().optional(),
            typeData: z.lazy(() => FieldTypeData$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.category === undefined ? null : { category: v.category }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.historical === undefined ? null : { historical: v.historical }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.jsonPath === undefined ? null : { jsonPath: v.jsonPath }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.typeData === undefined ? null : { typeData: v.typeData }),
            };
        });
}
