/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type EmployeeFilter = {
    /**
     * The field id (path) to filter by.<br /> Supported fields: “root.id”, "root.email".<br />Any other path will get a response of 400 HTTP error.
     */
    fieldPath?: string | undefined;
    /**
     * Supported operators: “equals” <br /> Any other operator will get a response of 400 HTTP error.
     */
    operator?: string | undefined;
    /**
     * List of values to compare. <br /> Empty list will result in 400 HTTP error.
     */
    values?: Array<string> | undefined;
};

/** @internal */
export namespace EmployeeFilter$ {
    export type Inbound = {
        fieldPath?: string | undefined;
        operator?: string | undefined;
        values?: Array<string> | undefined;
    };

    export const inboundSchema: z.ZodType<EmployeeFilter, z.ZodTypeDef, Inbound> = z
        .object({
            fieldPath: z.string().optional(),
            operator: z.string().optional(),
            values: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.fieldPath === undefined ? null : { fieldPath: v.fieldPath }),
                ...(v.operator === undefined ? null : { operator: v.operator }),
                ...(v.values === undefined ? null : { values: v.values }),
            };
        });

    export type Outbound = {
        fieldPath?: string | undefined;
        operator?: string | undefined;
        values?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmployeeFilter> = z
        .object({
            fieldPath: z.string().optional(),
            operator: z.string().optional(),
            values: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.fieldPath === undefined ? null : { fieldPath: v.fieldPath }),
                ...(v.operator === undefined ? null : { operator: v.operator }),
                ...(v.values === undefined ? null : { values: v.values }),
            };
        });
}
