/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { RFCDate } from "../../../sdk/types";
import { z } from "zod";

export type CustomColumns = {};

/**
 * The manager's details.
 */
export type ReportsTo = {
    /**
     * The manager's display name.
     */
    displayName?: string | undefined;
    /**
     * The manager's email.
     */
    email?: string | undefined;
    /**
     * The manager's first name.
     */
    firstName?: string | undefined;
    /**
     * The manager's employee ID.
     */
    id: string;
    /**
     * The manager's surname.
     */
    surname?: string | undefined;
};

export type WorkEntry = {
    customColumns?: CustomColumns | undefined;
    /**
     * The employee's department.
     */
    department?: string | undefined;
    /**
     * The date this entry becomes effective.
     */
    effectiveDate: RFCDate;
    /**
     * ID.
     */
    id?: number | undefined;
    /**
     * The reason for this change.
     */
    reason?: string | undefined;
    /**
     * The manager's details.
     */
    reportsTo?: ReportsTo | undefined;
    /**
     * The employee's site.
     */
    site?: string | undefined;
    /**
     * The employee's site ID.
     */
    siteId?: number | undefined;
    /**
     * The employee's job title.
     */
    title?: string | undefined;
};

/** @internal */
export namespace CustomColumns$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<CustomColumns, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CustomColumns> = z.object({});
}

/** @internal */
export namespace ReportsTo$ {
    export type Inbound = {
        displayName?: string | undefined;
        email?: string | undefined;
        firstName?: string | undefined;
        id: string;
        surname?: string | undefined;
    };

    export const inboundSchema: z.ZodType<ReportsTo, z.ZodTypeDef, Inbound> = z
        .object({
            displayName: z.string().optional(),
            email: z.string().optional(),
            firstName: z.string().optional(),
            id: z.string(),
            surname: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                id: v.id,
                ...(v.surname === undefined ? null : { surname: v.surname }),
            };
        });

    export type Outbound = {
        displayName?: string | undefined;
        email?: string | undefined;
        firstName?: string | undefined;
        id: string;
        surname?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ReportsTo> = z
        .object({
            displayName: z.string().optional(),
            email: z.string().optional(),
            firstName: z.string().optional(),
            id: z.string(),
            surname: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                id: v.id,
                ...(v.surname === undefined ? null : { surname: v.surname }),
            };
        });
}

/** @internal */
export namespace WorkEntry$ {
    export type Inbound = {
        customColumns?: CustomColumns$.Inbound | undefined;
        department?: string | undefined;
        effectiveDate: string;
        id?: number | undefined;
        reason?: string | undefined;
        reportsTo?: ReportsTo$.Inbound | undefined;
        site?: string | undefined;
        siteId?: number | undefined;
        title?: string | undefined;
    };

    export const inboundSchema: z.ZodType<WorkEntry, z.ZodTypeDef, Inbound> = z
        .object({
            customColumns: z.lazy(() => CustomColumns$.inboundSchema).optional(),
            department: z.string().optional(),
            effectiveDate: z.string().transform((v) => new RFCDate(v)),
            id: z.number().int().optional(),
            reason: z.string().optional(),
            reportsTo: z.lazy(() => ReportsTo$.inboundSchema).optional(),
            site: z.string().optional(),
            siteId: z.number().int().optional(),
            title: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.customColumns === undefined ? null : { customColumns: v.customColumns }),
                ...(v.department === undefined ? null : { department: v.department }),
                effectiveDate: v.effectiveDate,
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.reason === undefined ? null : { reason: v.reason }),
                ...(v.reportsTo === undefined ? null : { reportsTo: v.reportsTo }),
                ...(v.site === undefined ? null : { site: v.site }),
                ...(v.siteId === undefined ? null : { siteId: v.siteId }),
                ...(v.title === undefined ? null : { title: v.title }),
            };
        });

    export type Outbound = {
        customColumns?: CustomColumns$.Outbound | undefined;
        department?: string | undefined;
        effectiveDate: string;
        id?: number | undefined;
        reason?: string | undefined;
        reportsTo?: ReportsTo$.Outbound | undefined;
        site?: string | undefined;
        siteId?: number | undefined;
        title?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, WorkEntry> = z
        .object({
            customColumns: z.lazy(() => CustomColumns$.outboundSchema).optional(),
            department: z.string().optional(),
            effectiveDate: z.instanceof(RFCDate).transform((v) => v.toString()),
            id: z.number().int().optional(),
            reason: z.string().optional(),
            reportsTo: z.lazy(() => ReportsTo$.outboundSchema).optional(),
            site: z.string().optional(),
            siteId: z.number().int().optional(),
            title: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.customColumns === undefined ? null : { customColumns: v.customColumns }),
                ...(v.department === undefined ? null : { department: v.department }),
                effectiveDate: v.effectiveDate,
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.reason === undefined ? null : { reason: v.reason }),
                ...(v.reportsTo === undefined ? null : { reportsTo: v.reportsTo }),
                ...(v.site === undefined ? null : { site: v.site }),
                ...(v.siteId === undefined ? null : { siteId: v.siteId }),
                ...(v.title === undefined ? null : { title: v.title }),
            };
        });
}
