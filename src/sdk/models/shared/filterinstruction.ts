/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type FilterInstruction = {
    /**
     * The field id (path) to filter by.<br /> Supported fields: “/position/status”, "/position/name".<br />Any other path will get a response of 400 HTTP error.
     */
    fieldId: string;
    /**
     * Supported operators: “equals”, "notEqual".<br />Any other operator will get a response of 400 HTTP error.
     */
    operator: string;
    /**
     * List of values to compare.<br />Empty list will result in 400 HTTP error.
     */
    values: Array<string>;
};

/** @internal */
export namespace FilterInstruction$ {
    export type Inbound = {
        fieldId: string;
        operator: string;
        values: Array<string>;
    };

    export const inboundSchema: z.ZodType<FilterInstruction, z.ZodTypeDef, Inbound> = z
        .object({
            fieldId: z.string(),
            operator: z.string(),
            values: z.array(z.string()),
        })
        .transform((v) => {
            return {
                fieldId: v.fieldId,
                operator: v.operator,
                values: v.values,
            };
        });

    export type Outbound = {
        fieldId: string;
        operator: string;
        values: Array<string>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FilterInstruction> = z
        .object({
            fieldId: z.string(),
            operator: z.string(),
            values: z.array(z.string()),
        })
        .transform((v) => {
            return {
                fieldId: v.fieldId,
                operator: v.operator,
                values: v.values,
            };
        });
}
