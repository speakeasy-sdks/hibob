/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type PolicyTypes = {
    policyTypes?: Array<string> | undefined;
};

/** @internal */
export namespace PolicyTypes$ {
    export type Inbound = {
        policyTypes?: Array<string> | undefined;
    };

    export const inboundSchema: z.ZodType<PolicyTypes, z.ZodTypeDef, Inbound> = z
        .object({
            policyTypes: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.policyTypes === undefined ? null : { policyTypes: v.policyTypes }),
            };
        });

    export type Outbound = {
        policyTypes?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PolicyTypes> = z
        .object({
            policyTypes: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.policyTypes === undefined ? null : { policyTypes: v.policyTypes }),
            };
        });
}
