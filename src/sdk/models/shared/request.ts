/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { RFCDate } from "../../types";
import * as z from "zod";

/**
 * The type of request duration.<br> <b>portionOnRange</b> is when the request is for every morning or every afternoon during the days requested.<br> <b>hoursOnRange</b> is when the request is for X hours every day during the days requested.
 */
export enum Type {
    Days = "days",
    Hours = "hours",
    PortionOnRange = "portionOnRange",
    HoursOnRange = "hoursOnRange",
}

export type Request = {
    /**
     * The time off duration in hours for every day in the request (relevant for requests using the hoursOnRange type).
     */
    dailyHours?: number | undefined;
    /**
     * Date of the time off (relevant for request using the hours type)
     */
    date?: RFCDate | undefined;
    /**
     * What portion of the request's days is included - morning or afternoon (relevant for requests using the portionOnRange type).
     */
    dayPortion?: string | undefined;
    /**
     * Employee display name.
     */
    employeeDisplayName?: string | undefined;
    /**
     * Employee ID.
     */
    employeeId?: string | undefined;
    /**
     * Date of the last day of the time off (not relevant for requests using the hours type).
     */
    endDate?: RFCDate | undefined;
    /**
     * What portion of the last day is included - all_day, morning or afternoon (relevant for requests using the days type).
     */
    endPortion?: string | undefined;
    /**
     * The time off duration in hours for the date (relevant for request using the hours type).
     */
    hoursOnDate?: number | undefined;
    /**
     * Relevant for request using the hours type.
     */
    minutes?: number | undefined;
    /**
     * Request policy type, e.g. Holiday, Sick or any defined custom type.
     */
    policyType?: string | undefined;
    /**
     * Display name for the policy type. This will be translated based on the locale.
     */
    policyTypeDisplayName?: string | undefined;
    requestId?: number | undefined;
    /**
     * Date of the first day of the time off (not relevant for requests using the hours type).
     */
    startDate?: RFCDate | undefined;
    /**
     * What portion of the first day is included - all_day, morning or afternoon (relevant for request using the days type).
     */
    startPortion?: string | undefined;
    /**
     * Request status. This can be either Approved or Pending.
     */
    status?: string | undefined;
    /**
     * The type of request duration.<br> <b>portionOnRange</b> is when the request is for every morning or every afternoon during the days requested.<br> <b>hoursOnRange</b> is when the request is for X hours every day during the days requested.
     */
    type?: Type | undefined;
};

/** @internal */
export const Type$ = z.nativeEnum(Type);

/** @internal */
export namespace Request$ {
    export type Inbound = {
        dailyHours?: number | undefined;
        date?: string | undefined;
        dayPortion?: string | undefined;
        employeeDisplayName?: string | undefined;
        employeeId?: string | undefined;
        endDate?: string | undefined;
        endPortion?: string | undefined;
        hoursOnDate?: number | undefined;
        minutes?: number | undefined;
        policyType?: string | undefined;
        policyTypeDisplayName?: string | undefined;
        requestId?: number | undefined;
        startDate?: string | undefined;
        startPortion?: string | undefined;
        status?: string | undefined;
        type?: Type | undefined;
    };

    export const inboundSchema: z.ZodType<Request, z.ZodTypeDef, Inbound> = z
        .object({
            dailyHours: z.number().optional(),
            date: z
                .string()
                .transform((v) => new RFCDate(v))
                .optional(),
            dayPortion: z.string().optional(),
            employeeDisplayName: z.string().optional(),
            employeeId: z.string().optional(),
            endDate: z
                .string()
                .transform((v) => new RFCDate(v))
                .optional(),
            endPortion: z.string().optional(),
            hoursOnDate: z.number().int().optional(),
            minutes: z.number().int().optional(),
            policyType: z.string().optional(),
            policyTypeDisplayName: z.string().optional(),
            requestId: z.number().int().optional(),
            startDate: z
                .string()
                .transform((v) => new RFCDate(v))
                .optional(),
            startPortion: z.string().optional(),
            status: z.string().optional(),
            type: Type$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.dailyHours === undefined ? null : { dailyHours: v.dailyHours }),
                ...(v.date === undefined ? null : { date: v.date }),
                ...(v.dayPortion === undefined ? null : { dayPortion: v.dayPortion }),
                ...(v.employeeDisplayName === undefined
                    ? null
                    : { employeeDisplayName: v.employeeDisplayName }),
                ...(v.employeeId === undefined ? null : { employeeId: v.employeeId }),
                ...(v.endDate === undefined ? null : { endDate: v.endDate }),
                ...(v.endPortion === undefined ? null : { endPortion: v.endPortion }),
                ...(v.hoursOnDate === undefined ? null : { hoursOnDate: v.hoursOnDate }),
                ...(v.minutes === undefined ? null : { minutes: v.minutes }),
                ...(v.policyType === undefined ? null : { policyType: v.policyType }),
                ...(v.policyTypeDisplayName === undefined
                    ? null
                    : { policyTypeDisplayName: v.policyTypeDisplayName }),
                ...(v.requestId === undefined ? null : { requestId: v.requestId }),
                ...(v.startDate === undefined ? null : { startDate: v.startDate }),
                ...(v.startPortion === undefined ? null : { startPortion: v.startPortion }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });

    export type Outbound = {
        dailyHours?: number | undefined;
        date?: string | undefined;
        dayPortion?: string | undefined;
        employeeDisplayName?: string | undefined;
        employeeId?: string | undefined;
        endDate?: string | undefined;
        endPortion?: string | undefined;
        hoursOnDate?: number | undefined;
        minutes?: number | undefined;
        policyType?: string | undefined;
        policyTypeDisplayName?: string | undefined;
        requestId?: number | undefined;
        startDate?: string | undefined;
        startPortion?: string | undefined;
        status?: string | undefined;
        type?: Type | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Request> = z
        .object({
            dailyHours: z.number().optional(),
            date: z
                .instanceof(RFCDate)
                .transform((v) => v.toString())
                .optional(),
            dayPortion: z.string().optional(),
            employeeDisplayName: z.string().optional(),
            employeeId: z.string().optional(),
            endDate: z
                .instanceof(RFCDate)
                .transform((v) => v.toString())
                .optional(),
            endPortion: z.string().optional(),
            hoursOnDate: z.number().int().optional(),
            minutes: z.number().int().optional(),
            policyType: z.string().optional(),
            policyTypeDisplayName: z.string().optional(),
            requestId: z.number().int().optional(),
            startDate: z
                .instanceof(RFCDate)
                .transform((v) => v.toString())
                .optional(),
            startPortion: z.string().optional(),
            status: z.string().optional(),
            type: Type$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.dailyHours === undefined ? null : { dailyHours: v.dailyHours }),
                ...(v.date === undefined ? null : { date: v.date }),
                ...(v.dayPortion === undefined ? null : { dayPortion: v.dayPortion }),
                ...(v.employeeDisplayName === undefined
                    ? null
                    : { employeeDisplayName: v.employeeDisplayName }),
                ...(v.employeeId === undefined ? null : { employeeId: v.employeeId }),
                ...(v.endDate === undefined ? null : { endDate: v.endDate }),
                ...(v.endPortion === undefined ? null : { endPortion: v.endPortion }),
                ...(v.hoursOnDate === undefined ? null : { hoursOnDate: v.hoursOnDate }),
                ...(v.minutes === undefined ? null : { minutes: v.minutes }),
                ...(v.policyType === undefined ? null : { policyType: v.policyType }),
                ...(v.policyTypeDisplayName === undefined
                    ? null
                    : { policyTypeDisplayName: v.policyTypeDisplayName }),
                ...(v.requestId === undefined ? null : { requestId: v.requestId }),
                ...(v.startDate === undefined ? null : { startDate: v.startDate }),
                ...(v.startPortion === undefined ? null : { startPortion: v.startPortion }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });
}
