/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type CreateFieldRequest = {
    /**
     * The category of the field.
     */
    category: string;
    /**
     * The description of the field.
     */
    description?: string | undefined;
    /**
     * When true, this field keeps the history of its values, each being active starting from a certain date. The default value is false.
     */
    historical?: string | undefined;
    /**
     * The name of the field.
     */
    name: string;
    /**
     * The type of field. Supported field types: text, text-area, number, date, list, multi-list, hierarchy-list, currency, employee-reference, document.
     */
    type: string;
};

/** @internal */
export namespace CreateFieldRequest$ {
    export type Inbound = {
        category: string;
        description?: string | undefined;
        historical?: string | undefined;
        name: string;
        type: string;
    };

    export const inboundSchema: z.ZodType<CreateFieldRequest, z.ZodTypeDef, Inbound> = z
        .object({
            category: z.string(),
            description: z.string().optional(),
            historical: z.string().optional(),
            name: z.string(),
            type: z.string(),
        })
        .transform((v) => {
            return {
                category: v.category,
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.historical === undefined ? null : { historical: v.historical }),
                name: v.name,
                type: v.type,
            };
        });

    export type Outbound = {
        category: string;
        description?: string | undefined;
        historical?: string | undefined;
        name: string;
        type: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateFieldRequest> = z
        .object({
            category: z.string(),
            description: z.string().optional(),
            historical: z.string().optional(),
            name: z.string(),
            type: z.string(),
        })
        .transform((v) => {
            return {
                category: v.category,
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.historical === undefined ? null : { historical: v.historical }),
                name: v.name,
                type: v.type,
            };
        });
}
