/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type PersonalPart = {
    /**
     * One of Male / Female.
     */
    gender?: string | undefined;
    /**
     * The employee's title, This can be Mr, Mrs. Ms. etc.
     */
    honorific?: string | undefined;
    shortBirthDate?: string | undefined;
};

/** @internal */
export namespace PersonalPart$ {
    export type Inbound = {
        gender?: string | undefined;
        honorific?: string | undefined;
        shortBirthDate?: string | undefined;
    };

    export const inboundSchema: z.ZodType<PersonalPart, z.ZodTypeDef, Inbound> = z
        .object({
            gender: z.string().optional(),
            honorific: z.string().optional(),
            shortBirthDate: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.gender === undefined ? null : { gender: v.gender }),
                ...(v.honorific === undefined ? null : { honorific: v.honorific }),
                ...(v.shortBirthDate === undefined ? null : { shortBirthDate: v.shortBirthDate }),
            };
        });

    export type Outbound = {
        gender?: string | undefined;
        honorific?: string | undefined;
        shortBirthDate?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PersonalPart> = z
        .object({
            gender: z.string().optional(),
            honorific: z.string().optional(),
            shortBirthDate: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.gender === undefined ? null : { gender: v.gender }),
                ...(v.honorific === undefined ? null : { honorific: v.honorific }),
                ...(v.shortBirthDate === undefined ? null : { shortBirthDate: v.shortBirthDate }),
            };
        });
}
