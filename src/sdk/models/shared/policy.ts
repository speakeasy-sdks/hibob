/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { YearsOfServiceIncrements, YearsOfServiceIncrements$ } from "./yearsofserviceincrements";
import * as z from "zod";

/**
 * The shortest amount of time employees can request.
 */
export enum MinTimeOffRequestDuration {
    FullDay = "fullDay",
    HalfDay = "halfDay",
    FullHour = "fullHour",
    HalfHour = "halfHour",
    QuarterHour = "quarterHour",
}

export enum Unit {
    Days = "days",
    Hours = "hours",
}

export type Policy = {
    /**
     * Base annual allowance.
     */
    allowance?: number | undefined;
    /**
     * Requests require approval.
     */
    approvalRequired?: boolean | undefined;
    /**
     * Policy description.
     */
    description?: string | undefined;
    /**
     * Maximum balance at the end of the cycle.
     */
    maxBalance?: number | undefined;
    /**
     * Minimum balance cap.
     */
    minBalance?: number | undefined;
    /**
     * The shortest amount of time employees can request.
     */
    minTimeOffRequestDuration?: MinTimeOffRequestDuration | undefined;
    name?: string | undefined;
    unit?: Unit | undefined;
    yosIncrease?: Array<YearsOfServiceIncrements> | undefined;
};

/** @internal */
export const MinTimeOffRequestDuration$ = z.nativeEnum(MinTimeOffRequestDuration);

/** @internal */
export const Unit$ = z.nativeEnum(Unit);

/** @internal */
export namespace Policy$ {
    export type Inbound = {
        allowance?: number | undefined;
        approvalRequired?: boolean | undefined;
        description?: string | undefined;
        maxBalance?: number | undefined;
        minBalance?: number | undefined;
        minTimeOffRequestDuration?: MinTimeOffRequestDuration | undefined;
        name?: string | undefined;
        unit?: Unit | undefined;
        yosIncrease?: Array<YearsOfServiceIncrements$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<Policy, z.ZodTypeDef, Inbound> = z
        .object({
            allowance: z.number().optional(),
            approvalRequired: z.boolean().optional(),
            description: z.string().optional(),
            maxBalance: z.number().optional(),
            minBalance: z.number().optional(),
            minTimeOffRequestDuration: MinTimeOffRequestDuration$.optional(),
            name: z.string().optional(),
            unit: Unit$.optional(),
            yosIncrease: z.array(YearsOfServiceIncrements$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.allowance === undefined ? null : { allowance: v.allowance }),
                ...(v.approvalRequired === undefined
                    ? null
                    : { approvalRequired: v.approvalRequired }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.maxBalance === undefined ? null : { maxBalance: v.maxBalance }),
                ...(v.minBalance === undefined ? null : { minBalance: v.minBalance }),
                ...(v.minTimeOffRequestDuration === undefined
                    ? null
                    : { minTimeOffRequestDuration: v.minTimeOffRequestDuration }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.unit === undefined ? null : { unit: v.unit }),
                ...(v.yosIncrease === undefined ? null : { yosIncrease: v.yosIncrease }),
            };
        });

    export type Outbound = {
        allowance?: number | undefined;
        approvalRequired?: boolean | undefined;
        description?: string | undefined;
        maxBalance?: number | undefined;
        minBalance?: number | undefined;
        minTimeOffRequestDuration?: MinTimeOffRequestDuration | undefined;
        name?: string | undefined;
        unit?: Unit | undefined;
        yosIncrease?: Array<YearsOfServiceIncrements$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Policy> = z
        .object({
            allowance: z.number().optional(),
            approvalRequired: z.boolean().optional(),
            description: z.string().optional(),
            maxBalance: z.number().optional(),
            minBalance: z.number().optional(),
            minTimeOffRequestDuration: MinTimeOffRequestDuration$.optional(),
            name: z.string().optional(),
            unit: Unit$.optional(),
            yosIncrease: z.array(YearsOfServiceIncrements$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.allowance === undefined ? null : { allowance: v.allowance }),
                ...(v.approvalRequired === undefined
                    ? null
                    : { approvalRequired: v.approvalRequired }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.maxBalance === undefined ? null : { maxBalance: v.maxBalance }),
                ...(v.minBalance === undefined ? null : { minBalance: v.minBalance }),
                ...(v.minTimeOffRequestDuration === undefined
                    ? null
                    : { minTimeOffRequestDuration: v.minTimeOffRequestDuration }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.unit === undefined ? null : { unit: v.unit }),
                ...(v.yosIncrease === undefined ? null : { yosIncrease: v.yosIncrease }),
            };
        });
}
