/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type ObjectsMetadataTypeData = {
    /**
     * The ID of the list in the /v1/company/named-lists endpoint.
     */
    listId?: string | undefined;
};

export type FieldType = {
    /**
     * The type of the field.
     */
    type?: string | undefined;
    typeData?: ObjectsMetadataTypeData | undefined;
};

export type JsonPath = {
    /**
     * The path to the actual field value.
     */
    rawData?: string | undefined;
    /**
     * The path to the field json object. The field value and other properties, such as humanReadable value, will be placed inside.
     */
    root?: string | undefined;
};

export type ObjectsMetadata = {
    /**
     * Description of the field.
     */
    description?: string | undefined;
    fieldType?: FieldType | undefined;
    /**
     * ID of the field.
     */
    id?: string | undefined;
    jsonPath?: JsonPath | undefined;
    /**
     * Name of the field.
     */
    name?: string | undefined;
};

/** @internal */
export namespace ObjectsMetadataTypeData$ {
    export type Inbound = {
        listId?: string | undefined;
    };

    export const inboundSchema: z.ZodType<ObjectsMetadataTypeData, z.ZodTypeDef, Inbound> = z
        .object({
            listId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.listId === undefined ? null : { listId: v.listId }),
            };
        });

    export type Outbound = {
        listId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ObjectsMetadataTypeData> = z
        .object({
            listId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.listId === undefined ? null : { listId: v.listId }),
            };
        });
}

/** @internal */
export namespace FieldType$ {
    export type Inbound = {
        type?: string | undefined;
        typeData?: ObjectsMetadataTypeData$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<FieldType, z.ZodTypeDef, Inbound> = z
        .object({
            type: z.string().optional(),
            typeData: z.lazy(() => ObjectsMetadataTypeData$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.typeData === undefined ? null : { typeData: v.typeData }),
            };
        });

    export type Outbound = {
        type?: string | undefined;
        typeData?: ObjectsMetadataTypeData$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FieldType> = z
        .object({
            type: z.string().optional(),
            typeData: z.lazy(() => ObjectsMetadataTypeData$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.typeData === undefined ? null : { typeData: v.typeData }),
            };
        });
}

/** @internal */
export namespace JsonPath$ {
    export type Inbound = {
        rawData?: string | undefined;
        root?: string | undefined;
    };

    export const inboundSchema: z.ZodType<JsonPath, z.ZodTypeDef, Inbound> = z
        .object({
            rawData: z.string().optional(),
            root: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.rawData === undefined ? null : { rawData: v.rawData }),
                ...(v.root === undefined ? null : { root: v.root }),
            };
        });

    export type Outbound = {
        rawData?: string | undefined;
        root?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, JsonPath> = z
        .object({
            rawData: z.string().optional(),
            root: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.rawData === undefined ? null : { rawData: v.rawData }),
                ...(v.root === undefined ? null : { root: v.root }),
            };
        });
}

/** @internal */
export namespace ObjectsMetadata$ {
    export type Inbound = {
        description?: string | undefined;
        fieldType?: FieldType$.Inbound | undefined;
        id?: string | undefined;
        jsonPath?: JsonPath$.Inbound | undefined;
        name?: string | undefined;
    };

    export const inboundSchema: z.ZodType<ObjectsMetadata, z.ZodTypeDef, Inbound> = z
        .object({
            description: z.string().optional(),
            fieldType: z.lazy(() => FieldType$.inboundSchema).optional(),
            id: z.string().optional(),
            jsonPath: z.lazy(() => JsonPath$.inboundSchema).optional(),
            name: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.jsonPath === undefined ? null : { jsonPath: v.jsonPath }),
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });

    export type Outbound = {
        description?: string | undefined;
        fieldType?: FieldType$.Outbound | undefined;
        id?: string | undefined;
        jsonPath?: JsonPath$.Outbound | undefined;
        name?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ObjectsMetadata> = z
        .object({
            description: z.string().optional(),
            fieldType: z.lazy(() => FieldType$.outboundSchema).optional(),
            id: z.string().optional(),
            jsonPath: z.lazy(() => JsonPath$.outboundSchema).optional(),
            name: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.jsonPath === undefined ? null : { jsonPath: v.jsonPath }),
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });
}
