/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { RFCDate } from "../../../sdk/types";
import { CurrencyValue, CurrencyValue$ } from "./currencyvalue";
import * as z from "zod";

export type SalaryEntry = {
    base: CurrencyValue;
    /**
     * The date this entry becomes effective.
     */
    effectiveDate: RFCDate;
    /**
     * ID.
     */
    id?: number | undefined;
    /**
     * Represents the frequency the salary is paid. This can be one of: Weekly, Monthly, Pro rata, Every two weeks, Twice a month, Every four weeks.
     */
    payFrequency?: string | undefined;
    /**
     * Represents the period for this salary entry. This can be one of: Annual, Hourly, Daily, Weekly, Monthly.
     */
    payPeriod: string;
    /**
     * The reason for this change.
     */
    reason?: string | undefined;
};

/** @internal */
export namespace SalaryEntry$ {
    export type Inbound = {
        base: CurrencyValue$.Inbound;
        effectiveDate: string;
        id?: number | undefined;
        payFrequency?: string | undefined;
        payPeriod: string;
        reason?: string | undefined;
    };

    export const inboundSchema: z.ZodType<SalaryEntry, z.ZodTypeDef, Inbound> = z
        .object({
            base: CurrencyValue$.inboundSchema,
            effectiveDate: z.string().transform((v) => new RFCDate(v)),
            id: z.number().int().optional(),
            payFrequency: z.string().optional(),
            payPeriod: z.string(),
            reason: z.string().optional(),
        })
        .transform((v) => {
            return {
                base: v.base,
                effectiveDate: v.effectiveDate,
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.payFrequency === undefined ? null : { payFrequency: v.payFrequency }),
                payPeriod: v.payPeriod,
                ...(v.reason === undefined ? null : { reason: v.reason }),
            };
        });

    export type Outbound = {
        base: CurrencyValue$.Outbound;
        effectiveDate: string;
        id?: number | undefined;
        payFrequency?: string | undefined;
        payPeriod: string;
        reason?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SalaryEntry> = z
        .object({
            base: CurrencyValue$.outboundSchema,
            effectiveDate: z.instanceof(RFCDate).transform((v) => v.toString()),
            id: z.number().int().optional(),
            payFrequency: z.string().optional(),
            payPeriod: z.string(),
            reason: z.string().optional(),
        })
        .transform((v) => {
            return {
                base: v.base,
                effectiveDate: v.effectiveDate,
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.payFrequency === undefined ? null : { payFrequency: v.payFrequency }),
                payPeriod: v.payPeriod,
                ...(v.reason === undefined ? null : { reason: v.reason }),
            };
        });
}
