/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { TimeoffChange, TimeoffChange$ } from "./timeoffchange";
import { z } from "zod";

export type TimeoffChanges = {
    changes?: Array<TimeoffChange> | undefined;
};

/** @internal */
export namespace TimeoffChanges$ {
    export type Inbound = {
        changes?: Array<TimeoffChange$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<TimeoffChanges, z.ZodTypeDef, Inbound> = z
        .object({
            changes: z.array(TimeoffChange$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.changes === undefined ? null : { changes: v.changes }),
            };
        });

    export type Outbound = {
        changes?: Array<TimeoffChange$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TimeoffChanges> = z
        .object({
            changes: z.array(TimeoffChange$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.changes === undefined ? null : { changes: v.changes }),
            };
        });
}
