/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type ReadSingleEmployeeRequestReference = {
    /**
     * Optional array of employee field paths that's are required in response. If you don't specify fields - only basic fields and categories are returned: <br/><b>Basic fields:</b>  <ul>
     *
     * @remarks
     *                       <li>ID</li>
     *                       <li>Company ID</li>
     *                       <li>Email</li>
     *                       <li>First name</li>
     *                       <li>Last name</li>
     *                       <li>Display name</li>
     *                       <li>Middle name</li>
     *                       <li>Creation timestamp</li>
     *                       <li>Avatar URL</li>
     * </ul> <br/><b>Basic Categories:</b> <ul>
     *                       <li>About</li>
     *                       <li>Employment</li>
     *                       <li>Work</li>
     * </ul>
     */
    fields?: Array<string> | undefined;
    /**
     * Optional field.  <br> <b>If not sent:</b> supply machine-readable values only. <br> <br> Possible values: <br>  <br> <b>APPEND</b> - include the additional "humanReadable" JSON node in the response. <br>  <br> <b>REPLACE</b> - supply humanReadable values in JSON instead of machine-readable format. <br>
     */
    humanReadable?: string | undefined;
};

/** @internal */
export namespace ReadSingleEmployeeRequestReference$ {
    export type Inbound = {
        fields?: Array<string> | undefined;
        humanReadable?: string | undefined;
    };

    export const inboundSchema: z.ZodType<
        ReadSingleEmployeeRequestReference,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            fields: z.array(z.string()).optional(),
            humanReadable: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.fields === undefined ? null : { fields: v.fields }),
                ...(v.humanReadable === undefined ? null : { humanReadable: v.humanReadable }),
            };
        });

    export type Outbound = {
        fields?: Array<string> | undefined;
        humanReadable?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ReadSingleEmployeeRequestReference
    > = z
        .object({
            fields: z.array(z.string()).optional(),
            humanReadable: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.fields === undefined ? null : { fields: v.fields }),
                ...(v.humanReadable === undefined ? null : { humanReadable: v.humanReadable }),
            };
        });
}
