/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type PolicyNames = {
    policyNames?: Array<string> | undefined;
};

/** @internal */
export namespace PolicyNames$ {
    export type Inbound = {
        policyNames?: Array<string> | undefined;
    };

    export const inboundSchema: z.ZodType<PolicyNames, z.ZodTypeDef, Inbound> = z
        .object({
            policyNames: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.policyNames === undefined ? null : { policyNames: v.policyNames }),
            };
        });

    export type Outbound = {
        policyNames?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PolicyNames> = z
        .object({
            policyNames: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.policyNames === undefined ? null : { policyNames: v.policyNames }),
            };
        });
}
