/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { RFCDate } from "../../../sdk/types";
import { z } from "zod";

export type AttachmentLinks = {
    filename?: string | undefined;
    mimeType?: string | undefined;
    url?: string | undefined;
};

/**
 * The unit used for the totalDuration and totalCost - either 'days' or 'hours'
 */
export enum TimeoffRequestDurationUnit {
    Days = "days",
    Hours = "hours",
}

/**
 * The type of request duration.<br> <b>portionOnRange</b> is when the request is for every morning or every afternoon during the days requested.<br> <b>hoursOnRange</b> is when the request is for X hours every day during the days requested.
 */
export enum TimeoffRequestType {
    Days = "days",
    Hours = "hours",
    PortionOnRange = "portionOnRange",
    HoursOnRange = "hoursOnRange",
}

export type TimeoffRequest = {
    /**
     * Whether the request is approved (and hence publicly visible).
     */
    approved?: boolean | undefined;
    /**
     * Attachments with download links
     */
    attachmentLinks?: Array<AttachmentLinks> | undefined;
    /**
     * The time off duration in hours for every day in the request (relevant for requests using the hoursOnRange type).
     */
    dailyHours?: number | undefined;
    /**
     * Date of the time off (relevant for requests using the Hours type).
     */
    date?: RFCDate | undefined;
    /**
     * What portion of the request's days is included - morning or afternoon (relevant for requests using the portionOnRange type).
     */
    dayPortion?: string | undefined;
    /**
     * The request description.
     */
    description?: string | undefined;
    /**
     * The unit used for the totalDuration and totalCost - either 'days' or 'hours'
     */
    durationUnit?: TimeoffRequestDurationUnit | undefined;
    /**
     * Employee ID.
     */
    employeeId?: string | undefined;
    /**
     * Date of the last day of the time off (not relevant for requests using
     *
     * @remarks
     *                                                the hours type).
     */
    endDate?: RFCDate | undefined;
    /**
     * What portion of the last day is included - all_day, morning or afternoon (relevant for requests using the Days type).
     */
    endDatePortion?: string | undefined;
    /**
     * Whether the request has attachments
     */
    hasAttachment?: boolean | undefined;
    /**
     * The time off duration in hours for the date (relevant for requests using the Hours type)
     */
    hoursOnDate?: number | undefined;
    /**
     * Display name of the policy type.
     */
    policyTypeDisplayName?: string | undefined;
    /**
     * The reason code taken from the policy type's reason codes list. The list is available in GET /timeoff/policy-types/{policyType}/reason-codes
     */
    reasonCode?: string | undefined;
    /**
     * Time Off Request ID.
     */
    requestId?: number | undefined;
    /**
     * Date of the first day of the time off  (not relevant for requests using the hours type).
     */
    startDate?: RFCDate | undefined;
    /**
     * What portion of the first day is included - all_day, morning or afternoon (relevant for requests using the Days type).
     */
    startDatePortion?: string | undefined;
    /**
     * Request status. This can be approved, pending, canceled, etc.
     */
    status?: string | undefined;
    /**
     * The amount that will be deducted from the balance
     */
    totalCost?: number | undefined;
    /**
     * The total amount of time the request covers, including regular days off such as weekends
     */
    totalDuration?: number | undefined;
    /**
     * The type of request duration.<br> <b>portionOnRange</b> is when the request is for every morning or every afternoon during the days requested.<br> <b>hoursOnRange</b> is when the request is for X hours every day during the days requested.
     */
    type?: TimeoffRequestType | undefined;
};

/** @internal */
export namespace AttachmentLinks$ {
    export type Inbound = {
        filename?: string | undefined;
        mimeType?: string | undefined;
        url?: string | undefined;
    };

    export const inboundSchema: z.ZodType<AttachmentLinks, z.ZodTypeDef, Inbound> = z
        .object({
            filename: z.string().optional(),
            mimeType: z.string().optional(),
            url: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.filename === undefined ? null : { filename: v.filename }),
                ...(v.mimeType === undefined ? null : { mimeType: v.mimeType }),
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });

    export type Outbound = {
        filename?: string | undefined;
        mimeType?: string | undefined;
        url?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AttachmentLinks> = z
        .object({
            filename: z.string().optional(),
            mimeType: z.string().optional(),
            url: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.filename === undefined ? null : { filename: v.filename }),
                ...(v.mimeType === undefined ? null : { mimeType: v.mimeType }),
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });
}

/** @internal */
export const TimeoffRequestDurationUnit$ = z.nativeEnum(TimeoffRequestDurationUnit);

/** @internal */
export const TimeoffRequestType$ = z.nativeEnum(TimeoffRequestType);

/** @internal */
export namespace TimeoffRequest$ {
    export type Inbound = {
        approved?: boolean | undefined;
        attachmentLinks?: Array<AttachmentLinks$.Inbound> | undefined;
        dailyHours?: number | undefined;
        date?: string | undefined;
        dayPortion?: string | undefined;
        description?: string | undefined;
        durationUnit?: TimeoffRequestDurationUnit | undefined;
        employeeId?: string | undefined;
        endDate?: string | undefined;
        endDatePortion?: string | undefined;
        hasAttachment?: boolean | undefined;
        hoursOnDate?: number | undefined;
        policyTypeDisplayName?: string | undefined;
        reasonCode?: string | undefined;
        requestId?: number | undefined;
        startDate?: string | undefined;
        startDatePortion?: string | undefined;
        status?: string | undefined;
        totalCost?: number | undefined;
        totalDuration?: number | undefined;
        type?: TimeoffRequestType | undefined;
    };

    export const inboundSchema: z.ZodType<TimeoffRequest, z.ZodTypeDef, Inbound> = z
        .object({
            approved: z.boolean().optional(),
            attachmentLinks: z.array(z.lazy(() => AttachmentLinks$.inboundSchema)).optional(),
            dailyHours: z.number().optional(),
            date: z
                .string()
                .transform((v) => new RFCDate(v))
                .optional(),
            dayPortion: z.string().optional(),
            description: z.string().optional(),
            durationUnit: TimeoffRequestDurationUnit$.optional(),
            employeeId: z.string().optional(),
            endDate: z
                .string()
                .transform((v) => new RFCDate(v))
                .optional(),
            endDatePortion: z.string().optional(),
            hasAttachment: z.boolean().optional(),
            hoursOnDate: z.number().int().optional(),
            policyTypeDisplayName: z.string().optional(),
            reasonCode: z.string().optional(),
            requestId: z.number().int().optional(),
            startDate: z
                .string()
                .transform((v) => new RFCDate(v))
                .optional(),
            startDatePortion: z.string().optional(),
            status: z.string().optional(),
            totalCost: z.number().optional(),
            totalDuration: z.number().optional(),
            type: TimeoffRequestType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.approved === undefined ? null : { approved: v.approved }),
                ...(v.attachmentLinks === undefined
                    ? null
                    : { attachmentLinks: v.attachmentLinks }),
                ...(v.dailyHours === undefined ? null : { dailyHours: v.dailyHours }),
                ...(v.date === undefined ? null : { date: v.date }),
                ...(v.dayPortion === undefined ? null : { dayPortion: v.dayPortion }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.durationUnit === undefined ? null : { durationUnit: v.durationUnit }),
                ...(v.employeeId === undefined ? null : { employeeId: v.employeeId }),
                ...(v.endDate === undefined ? null : { endDate: v.endDate }),
                ...(v.endDatePortion === undefined ? null : { endDatePortion: v.endDatePortion }),
                ...(v.hasAttachment === undefined ? null : { hasAttachment: v.hasAttachment }),
                ...(v.hoursOnDate === undefined ? null : { hoursOnDate: v.hoursOnDate }),
                ...(v.policyTypeDisplayName === undefined
                    ? null
                    : { policyTypeDisplayName: v.policyTypeDisplayName }),
                ...(v.reasonCode === undefined ? null : { reasonCode: v.reasonCode }),
                ...(v.requestId === undefined ? null : { requestId: v.requestId }),
                ...(v.startDate === undefined ? null : { startDate: v.startDate }),
                ...(v.startDatePortion === undefined
                    ? null
                    : { startDatePortion: v.startDatePortion }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.totalCost === undefined ? null : { totalCost: v.totalCost }),
                ...(v.totalDuration === undefined ? null : { totalDuration: v.totalDuration }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });

    export type Outbound = {
        approved?: boolean | undefined;
        attachmentLinks?: Array<AttachmentLinks$.Outbound> | undefined;
        dailyHours?: number | undefined;
        date?: string | undefined;
        dayPortion?: string | undefined;
        description?: string | undefined;
        durationUnit?: TimeoffRequestDurationUnit | undefined;
        employeeId?: string | undefined;
        endDate?: string | undefined;
        endDatePortion?: string | undefined;
        hasAttachment?: boolean | undefined;
        hoursOnDate?: number | undefined;
        policyTypeDisplayName?: string | undefined;
        reasonCode?: string | undefined;
        requestId?: number | undefined;
        startDate?: string | undefined;
        startDatePortion?: string | undefined;
        status?: string | undefined;
        totalCost?: number | undefined;
        totalDuration?: number | undefined;
        type?: TimeoffRequestType | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TimeoffRequest> = z
        .object({
            approved: z.boolean().optional(),
            attachmentLinks: z.array(z.lazy(() => AttachmentLinks$.outboundSchema)).optional(),
            dailyHours: z.number().optional(),
            date: z
                .instanceof(RFCDate)
                .transform((v) => v.toString())
                .optional(),
            dayPortion: z.string().optional(),
            description: z.string().optional(),
            durationUnit: TimeoffRequestDurationUnit$.optional(),
            employeeId: z.string().optional(),
            endDate: z
                .instanceof(RFCDate)
                .transform((v) => v.toString())
                .optional(),
            endDatePortion: z.string().optional(),
            hasAttachment: z.boolean().optional(),
            hoursOnDate: z.number().int().optional(),
            policyTypeDisplayName: z.string().optional(),
            reasonCode: z.string().optional(),
            requestId: z.number().int().optional(),
            startDate: z
                .instanceof(RFCDate)
                .transform((v) => v.toString())
                .optional(),
            startDatePortion: z.string().optional(),
            status: z.string().optional(),
            totalCost: z.number().optional(),
            totalDuration: z.number().optional(),
            type: TimeoffRequestType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.approved === undefined ? null : { approved: v.approved }),
                ...(v.attachmentLinks === undefined
                    ? null
                    : { attachmentLinks: v.attachmentLinks }),
                ...(v.dailyHours === undefined ? null : { dailyHours: v.dailyHours }),
                ...(v.date === undefined ? null : { date: v.date }),
                ...(v.dayPortion === undefined ? null : { dayPortion: v.dayPortion }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.durationUnit === undefined ? null : { durationUnit: v.durationUnit }),
                ...(v.employeeId === undefined ? null : { employeeId: v.employeeId }),
                ...(v.endDate === undefined ? null : { endDate: v.endDate }),
                ...(v.endDatePortion === undefined ? null : { endDatePortion: v.endDatePortion }),
                ...(v.hasAttachment === undefined ? null : { hasAttachment: v.hasAttachment }),
                ...(v.hoursOnDate === undefined ? null : { hoursOnDate: v.hoursOnDate }),
                ...(v.policyTypeDisplayName === undefined
                    ? null
                    : { policyTypeDisplayName: v.policyTypeDisplayName }),
                ...(v.reasonCode === undefined ? null : { reasonCode: v.reasonCode }),
                ...(v.requestId === undefined ? null : { requestId: v.requestId }),
                ...(v.startDate === undefined ? null : { startDate: v.startDate }),
                ...(v.startDatePortion === undefined
                    ? null
                    : { startDatePortion: v.startDatePortion }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.totalCost === undefined ? null : { totalCost: v.totalCost }),
                ...(v.totalDuration === undefined ? null : { totalDuration: v.totalDuration }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });
}
