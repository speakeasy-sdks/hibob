/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type TypeData = {
    /**
     * The ID of the list in the /v1/company/named-lists endpoint.
     */
    listId?: string | undefined;
};

export type CustomTableColumn = {
    /**
     * The description of the column
     */
    description?: string | undefined;
    /**
     * The ID of the column
     */
    id?: string | undefined;
    /**
     * Flag which means that column must be present during creation and its value can't be null during update
     */
    mandatory?: boolean | undefined;
    /**
     * The name of the column
     */
    name?: string | undefined;
    /**
     * The type of the column. Supported column types: text, text-area, number, date, list, multi-list, hierarchy-list, currency, employee-reference, document.
     */
    type?: string | undefined;
    typeData?: TypeData | undefined;
};

/** @internal */
export namespace TypeData$ {
    export type Inbound = {
        listId?: string | undefined;
    };

    export const inboundSchema: z.ZodType<TypeData, z.ZodTypeDef, Inbound> = z
        .object({
            listId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.listId === undefined ? null : { listId: v.listId }),
            };
        });

    export type Outbound = {
        listId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TypeData> = z
        .object({
            listId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.listId === undefined ? null : { listId: v.listId }),
            };
        });
}

/** @internal */
export namespace CustomTableColumn$ {
    export type Inbound = {
        description?: string | undefined;
        id?: string | undefined;
        mandatory?: boolean | undefined;
        name?: string | undefined;
        type?: string | undefined;
        typeData?: TypeData$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<CustomTableColumn, z.ZodTypeDef, Inbound> = z
        .object({
            description: z.string().optional(),
            id: z.string().optional(),
            mandatory: z.boolean().optional(),
            name: z.string().optional(),
            type: z.string().optional(),
            typeData: z.lazy(() => TypeData$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.mandatory === undefined ? null : { mandatory: v.mandatory }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.typeData === undefined ? null : { typeData: v.typeData }),
            };
        });

    export type Outbound = {
        description?: string | undefined;
        id?: string | undefined;
        mandatory?: boolean | undefined;
        name?: string | undefined;
        type?: string | undefined;
        typeData?: TypeData$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CustomTableColumn> = z
        .object({
            description: z.string().optional(),
            id: z.string().optional(),
            mandatory: z.boolean().optional(),
            name: z.string().optional(),
            type: z.string().optional(),
            typeData: z.lazy(() => TypeData$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.mandatory === undefined ? null : { mandatory: v.mandatory }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.typeData === undefined ? null : { typeData: v.typeData }),
            };
        });
}
