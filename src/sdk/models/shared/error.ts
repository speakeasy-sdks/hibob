/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type ErrorT = {
    /**
     * A human readable error message.
     */
    error?: string | undefined;
    /**
     * The unique identifier of the error.
     */
    key?: string | undefined;
};

/** @internal */
export namespace ErrorT$ {
    export type Inbound = {
        error?: string | undefined;
        key?: string | undefined;
    };

    export const inboundSchema: z.ZodType<ErrorT, z.ZodTypeDef, Inbound> = z
        .object({
            error: z.string().optional(),
            key: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.error === undefined ? null : { error: v.error }),
                ...(v.key === undefined ? null : { key: v.key }),
            };
        });

    export type Outbound = {
        error?: string | undefined;
        key?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ErrorT> = z
        .object({
            error: z.string().optional(),
            key: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.error === undefined ? null : { error: v.error }),
                ...(v.key === undefined ? null : { key: v.key }),
            };
        });
}
