/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type PostPeopleCustomTablesEmployeeIdCustomTableIdRequestBody = {
    rawBody?: string | undefined;
};

export type PostPeopleCustomTablesEmployeeIdCustomTableIdRequest = {
    requestBody: PostPeopleCustomTablesEmployeeIdCustomTableIdRequestBody;
    /**
     * The ID of custom table.
     */
    customTableId: string;
    /**
     * Employee ID.
     */
    employeeId: string;
};

export type PostPeopleCustomTablesEmployeeIdCustomTableIdResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace PostPeopleCustomTablesEmployeeIdCustomTableIdRequestBody$ {
    export type Inbound = {
        RAW_BODY?: string | undefined;
    };

    export const inboundSchema: z.ZodType<
        PostPeopleCustomTablesEmployeeIdCustomTableIdRequestBody,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            RAW_BODY: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.RAW_BODY === undefined ? null : { rawBody: v.RAW_BODY }),
            };
        });

    export type Outbound = {
        RAW_BODY?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostPeopleCustomTablesEmployeeIdCustomTableIdRequestBody
    > = z
        .object({
            rawBody: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.rawBody === undefined ? null : { RAW_BODY: v.rawBody }),
            };
        });
}

/** @internal */
export namespace PostPeopleCustomTablesEmployeeIdCustomTableIdRequest$ {
    export type Inbound = {
        RequestBody: PostPeopleCustomTablesEmployeeIdCustomTableIdRequestBody$.Inbound;
        custom_table_id: string;
        employee_id: string;
    };

    export const inboundSchema: z.ZodType<
        PostPeopleCustomTablesEmployeeIdCustomTableIdRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            RequestBody: z.lazy(
                () => PostPeopleCustomTablesEmployeeIdCustomTableIdRequestBody$.inboundSchema
            ),
            custom_table_id: z.string(),
            employee_id: z.string(),
        })
        .transform((v) => {
            return {
                requestBody: v.RequestBody,
                customTableId: v.custom_table_id,
                employeeId: v.employee_id,
            };
        });

    export type Outbound = {
        RequestBody: PostPeopleCustomTablesEmployeeIdCustomTableIdRequestBody$.Outbound;
        custom_table_id: string;
        employee_id: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostPeopleCustomTablesEmployeeIdCustomTableIdRequest
    > = z
        .object({
            requestBody: z.lazy(
                () => PostPeopleCustomTablesEmployeeIdCustomTableIdRequestBody$.outboundSchema
            ),
            customTableId: z.string(),
            employeeId: z.string(),
        })
        .transform((v) => {
            return {
                RequestBody: v.requestBody,
                custom_table_id: v.customTableId,
                employee_id: v.employeeId,
            };
        });
}

/** @internal */
export namespace PostPeopleCustomTablesEmployeeIdCustomTableIdResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<
        PostPeopleCustomTablesEmployeeIdCustomTableIdResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostPeopleCustomTablesEmployeeIdCustomTableIdResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
