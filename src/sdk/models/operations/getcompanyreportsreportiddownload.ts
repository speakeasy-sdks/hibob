/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class GetCompanyReportsReportIdDownloadSecurity extends SpeakeasyBase {
    @SpeakeasyMetadata({ data: "security, scheme=true;type=http;subtype=basic" })
    basic?: shared.SchemeBasic;

    @SpeakeasyMetadata({
        data: "security, scheme=true;type=apiKey;subtype=header;name=Authorization",
    })
    bearer?: string;
}

/**
 * File format
 */
export enum GetCompanyReportsReportIdDownloadFormat {
    Csv = "csv",
    Xlsx = "xlsx",
}

export class GetCompanyReportsReportIdDownloadRequest extends SpeakeasyBase {
    /**
     * File format
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=format" })
    format: GetCompanyReportsReportIdDownloadFormat;

    /**
     * Should include info.
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=includeInfo" })
    includeInfo?: boolean;

    /**
     * Requested language for the report columns in the format of locale (e.g. fr-FR). If this is not provided, the user preferences locale is used.
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=locale" })
    locale?: string;

    /**
     * Report ID
     */
    @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=reportId" })
    reportId: number;
}

export class GetCompanyReportsReportIdDownloadResponse extends SpeakeasyBase {
    @SpeakeasyMetadata()
    contentType: string;

    /**
     * Unexpected error
     */
    @SpeakeasyMetadata()
    error?: shared.ErrorT;

    @SpeakeasyMetadata()
    statusCode: number;

    @SpeakeasyMetadata()
    rawResponse?: AxiosResponse;

    /**
     * Includes the report name and execution date in the report file. By default this is set to True.
     */
    @SpeakeasyMetadata()
    getCompanyReportsReportIdDownload200ApplicationJSONBinaryString?: Uint8Array;
}
