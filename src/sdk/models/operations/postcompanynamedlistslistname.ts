/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../../../sdk/models/shared";
import { z } from "zod";

export type PostCompanyNamedListsListNameSecurity = {
    basic?: shared.SchemeBasic | undefined;
    bearer?: string | undefined;
};

export type PostCompanyNamedListsListNameRequest = {
    /**
     * The <b>parentId</b> attribute is optional and only applies to hierarchy lists. When <b>parentId</b> is specified, the newly created list item will be placed under the specific hierarchy parent node.
     */
    newListItem: shared.NewListItem;
    /**
     * The internal name of the list.
     */
    listName: string;
};

export type PostCompanyNamedListsListNameResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * A new item is created. Please note that the ID of the newly created item may be textual or numeric depending on the list type.
     */
    flatListItemId?: shared.FlatListItemId | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace PostCompanyNamedListsListNameRequest$ {
    export type Inbound = {
        NewListItem: shared.NewListItem$.Inbound;
        listName: string;
    };

    export const inboundSchema: z.ZodType<
        PostCompanyNamedListsListNameRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            NewListItem: shared.NewListItem$.inboundSchema,
            listName: z.string(),
        })
        .transform((v) => {
            return {
                newListItem: v.NewListItem,
                listName: v.listName,
            };
        });

    export type Outbound = {
        NewListItem: shared.NewListItem$.Outbound;
        listName: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostCompanyNamedListsListNameRequest
    > = z
        .object({
            newListItem: shared.NewListItem$.outboundSchema,
            listName: z.string(),
        })
        .transform((v) => {
            return {
                NewListItem: v.newListItem,
                listName: v.listName,
            };
        });
}

/** @internal */
export namespace PostCompanyNamedListsListNameResponse$ {
    export type Inbound = {
        ContentType: string;
        FlatListItemId?: shared.FlatListItemId$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<
        PostCompanyNamedListsListNameResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            FlatListItemId: shared.FlatListItemId$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.FlatListItemId === undefined ? null : { flatListItemId: v.FlatListItemId }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        FlatListItemId?: shared.FlatListItemId$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostCompanyNamedListsListNameResponse
    > = z
        .object({
            contentType: z.string(),
            flatListItemId: shared.FlatListItemId$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.flatListItemId === undefined ? null : { FlatListItemId: v.flatListItemId }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
