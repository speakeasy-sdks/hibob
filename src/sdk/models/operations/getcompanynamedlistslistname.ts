/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../../../sdk/models/shared";
import * as z from "zod";

export type GetCompanyNamedListsListNameRequest = {
    /**
     * Whether to include archived items in the response.
     */
    includeArchived?: boolean | undefined;
    /**
     * The internal name of the list.
     */
    listName: string;
};

export type GetCompanyNamedListsListNameResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * Successful response. Please note that the item ID may be textual or numeric depending on the list type.
     */
    list?: shared.List | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace GetCompanyNamedListsListNameRequest$ {
    export type Inbound = {
        includeArchived?: boolean | undefined;
        listName: string;
    };

    export const inboundSchema: z.ZodType<
        GetCompanyNamedListsListNameRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            includeArchived: z.boolean().default(false),
            listName: z.string(),
        })
        .transform((v) => {
            return {
                includeArchived: v.includeArchived,
                listName: v.listName,
            };
        });

    export type Outbound = {
        includeArchived: boolean;
        listName: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetCompanyNamedListsListNameRequest
    > = z
        .object({
            includeArchived: z.boolean().default(false),
            listName: z.string(),
        })
        .transform((v) => {
            return {
                includeArchived: v.includeArchived,
                listName: v.listName,
            };
        });
}

/** @internal */
export namespace GetCompanyNamedListsListNameResponse$ {
    export type Inbound = {
        ContentType: string;
        List?: shared.List$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<
        GetCompanyNamedListsListNameResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            List: shared.List$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.List === undefined ? null : { list: v.List }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        List?: shared.List$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetCompanyNamedListsListNameResponse
    > = z
        .object({
            contentType: z.string(),
            list: shared.List$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.list === undefined ? null : { List: v.list }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
