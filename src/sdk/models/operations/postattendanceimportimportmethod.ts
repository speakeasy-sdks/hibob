/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class PostAttendanceImportImportMethodSecurity extends SpeakeasyBase {
    @SpeakeasyMetadata({ data: "security, scheme=true;type=http;subtype=basic;name=password" })
    password: string;

    @SpeakeasyMetadata({ data: "security, scheme=true;type=http;subtype=basic;name=username" })
    username: string;
}

/**
 * Indicates if the provided data should be processed via an aggregation engine or immediately. <ul>Aggregate - will add the logs to a temporary location, and an aggregation job will process the data asynchronously.</ul><ul>Immediate - will insert the records as-is.</ul>
 */
export enum PostAttendanceImportImportMethodImportMethod {
    Aggregate = "aggregate",
    Immediate = "immediate",
}

export class PostAttendanceImportImportMethodRequest extends SpeakeasyBase {
    @SpeakeasyMetadata({ data: "request, media_type=application/json" })
    importAttendanceData: shared.ImportAttendanceData;

    /**
     * Indicates if the provided data should be processed via an aggregation engine or immediately. <ul>Aggregate - will add the logs to a temporary location, and an aggregation job will process the data asynchronously.</ul><ul>Immediate - will insert the records as-is.</ul>
     */
    @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=importMethod" })
    importMethod: PostAttendanceImportImportMethodImportMethod;
}

export class PostAttendanceImportImportMethodResponse extends SpeakeasyBase {
    @SpeakeasyMetadata()
    contentType: string;

    /**
     * Records imported
     */
    @SpeakeasyMetadata()
    importAttendanceResponse?: shared.ImportAttendanceResponse;

    @SpeakeasyMetadata()
    statusCode: number;

    @SpeakeasyMetadata()
    rawResponse?: AxiosResponse;
}
