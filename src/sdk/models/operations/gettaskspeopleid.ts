/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../../../sdk/models/shared";
import { AxiosResponse } from "axios";

export class GetTasksPeopleIdSecurity extends SpeakeasyBase {
    @SpeakeasyMetadata({ data: "security, scheme=true;type=http;subtype=basic" })
    basic?: shared.SchemeBasic;

    @SpeakeasyMetadata({
        data: "security, scheme=true;type=apiKey;subtype=header;name=Authorization",
    })
    bearer?: string;
}

/**
 * filter tasks by open / closed status. Not sending task_status will return all tasks.
 */
export enum TaskStatus {
    Open = "open",
    Closed = "closed",
}

export class GetTasksPeopleIdRequest extends SpeakeasyBase {
    /**
     * employee id
     */
    @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=id" })
    id: string;

    /**
     * filter tasks by open / closed status. Not sending task_status will return all tasks.
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=task_status" })
    taskStatus?: TaskStatus;
}

export class GetTasksPeopleIdResponse extends SpeakeasyBase {
    /**
     * HTTP response content type for this operation
     */
    @SpeakeasyMetadata()
    contentType: string;

    /**
     * Unexpected error
     */
    @SpeakeasyMetadata()
    error?: shared.ErrorT;

    /**
     * HTTP response status code for this operation
     */
    @SpeakeasyMetadata()
    statusCode: number;

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    @SpeakeasyMetadata()
    rawResponse?: AxiosResponse;

    /**
     * All of a specific employee's open tasks.
     */
    @SpeakeasyMetadata()
    tasks?: shared.Tasks;
}
