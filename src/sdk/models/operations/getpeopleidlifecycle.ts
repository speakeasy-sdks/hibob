/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared";
import * as z from "zod";

export type GetPeopleIdLifecycleRequest = {
    /**
     * Employee ID.
     */
    id: string;
};

export type GetPeopleIdLifecycleResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * List of life-cycle history entries.
     */
    lifeCycleEntries?: shared.LifeCycleEntries | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace GetPeopleIdLifecycleRequest$ {
    export type Inbound = {
        id: string;
    };

    export const inboundSchema: z.ZodType<GetPeopleIdLifecycleRequest, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string(),
        })
        .transform((v) => {
            return {
                id: v.id,
            };
        });

    export type Outbound = {
        id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetPeopleIdLifecycleRequest> = z
        .object({
            id: z.string(),
        })
        .transform((v) => {
            return {
                id: v.id,
            };
        });
}

/** @internal */
export namespace GetPeopleIdLifecycleResponse$ {
    export type Inbound = {
        ContentType: string;
        LifeCycleEntries?: shared.LifeCycleEntries$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<GetPeopleIdLifecycleResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            LifeCycleEntries: shared.LifeCycleEntries$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.LifeCycleEntries === undefined
                    ? null
                    : { lifeCycleEntries: v.LifeCycleEntries }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        LifeCycleEntries?: shared.LifeCycleEntries$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetPeopleIdLifecycleResponse> = z
        .object({
            contentType: z.string(),
            lifeCycleEntries: shared.LifeCycleEntries$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.lifeCycleEntries === undefined
                    ? null
                    : { LifeCycleEntries: v.lifeCycleEntries }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
