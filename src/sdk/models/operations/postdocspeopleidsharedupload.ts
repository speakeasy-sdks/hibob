/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as b64$ from "../../../lib/base64";
import * as shared from "../../../sdk/models/shared";
import { blobLikeSchema } from "../../../sdk/types";
import * as z from "zod";

export type PostDocsPeopleIdSharedUploadFile = {
    content: Uint8Array | string;
    fileName: string;
};

export type PostDocsPeopleIdSharedUploadRequestBody = {
    /**
     * The file to upload.
     */
    file: PostDocsPeopleIdSharedUploadFile | Blob;
};

export type PostDocsPeopleIdSharedUploadRequest = {
    requestBody: PostDocsPeopleIdSharedUploadRequestBody;
    /**
     * Employee ID.
     */
    id: string;
};

export type PostDocsPeopleIdSharedUploadResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * Unexpected error.
     */
    error?: shared.ErrorT | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace PostDocsPeopleIdSharedUploadFile$ {
    export type Inbound = {
        content: Uint8Array | string;
        fileName: string;
    };

    export const inboundSchema: z.ZodType<PostDocsPeopleIdSharedUploadFile, z.ZodTypeDef, Inbound> =
        z
            .object({
                content: b64$.zodInbound,
                fileName: z.string(),
            })
            .transform((v) => {
                return {
                    content: v.content,
                    fileName: v.fileName,
                };
            });

    export type Outbound = {
        content: Uint8Array;
        fileName: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostDocsPeopleIdSharedUploadFile
    > = z
        .object({
            content: b64$.zodOutbound,
            fileName: z.string(),
        })
        .transform((v) => {
            return {
                content: v.content,
                fileName: v.fileName,
            };
        });
}

/** @internal */
export namespace PostDocsPeopleIdSharedUploadRequestBody$ {
    export type Inbound = {
        file: PostDocsPeopleIdSharedUploadFile$.Inbound;
    };

    export const inboundSchema: z.ZodType<
        PostDocsPeopleIdSharedUploadRequestBody,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            file: z.lazy(() => PostDocsPeopleIdSharedUploadFile$.inboundSchema),
        })
        .transform((v) => {
            return {
                file: v.file,
            };
        });

    export type Outbound = {
        file: PostDocsPeopleIdSharedUploadFile$.Outbound | Blob;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostDocsPeopleIdSharedUploadRequestBody
    > = z
        .object({
            file: z.lazy(() => PostDocsPeopleIdSharedUploadFile$.outboundSchema).or(blobLikeSchema),
        })
        .transform((v) => {
            return {
                file: v.file,
            };
        });
}

/** @internal */
export namespace PostDocsPeopleIdSharedUploadRequest$ {
    export type Inbound = {
        RequestBody: PostDocsPeopleIdSharedUploadRequestBody$.Inbound;
        id: string;
    };

    export const inboundSchema: z.ZodType<
        PostDocsPeopleIdSharedUploadRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            RequestBody: z.lazy(() => PostDocsPeopleIdSharedUploadRequestBody$.inboundSchema),
            id: z.string(),
        })
        .transform((v) => {
            return {
                requestBody: v.RequestBody,
                id: v.id,
            };
        });

    export type Outbound = {
        RequestBody: PostDocsPeopleIdSharedUploadRequestBody$.Outbound;
        id: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostDocsPeopleIdSharedUploadRequest
    > = z
        .object({
            requestBody: z.lazy(() => PostDocsPeopleIdSharedUploadRequestBody$.outboundSchema),
            id: z.string(),
        })
        .transform((v) => {
            return {
                RequestBody: v.requestBody,
                id: v.id,
            };
        });
}

/** @internal */
export namespace PostDocsPeopleIdSharedUploadResponse$ {
    export type Inbound = {
        ContentType: string;
        Error?: shared.ErrorT$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<
        PostDocsPeopleIdSharedUploadResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            Error: shared.ErrorT$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.Error === undefined ? null : { error: v.Error }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        Error?: shared.ErrorT$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostDocsPeopleIdSharedUploadResponse
    > = z
        .object({
            contentType: z.string(),
            error: shared.ErrorT$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.error === undefined ? null : { Error: v.error }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
