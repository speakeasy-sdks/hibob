/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../../../sdk/models/shared";
import { RFCDate } from "../../../sdk/types";
import { z } from "zod";

export type GetTimeoffWhosoutRequest = {
    /**
     * Start period date
     */
    from: RFCDate;
    /**
     * Include Hourly Requests
     */
    includeHourly?: boolean | undefined;
    /**
     * Include Pending Requests
     */
    includePending?: boolean | undefined;
    /**
     * Show the policy type's name instead of the policy's custom public name if the user has permission to view it, and the policy's custom public name exists.
     */
    includePrivate?: boolean | undefined;
    /**
     * End period date
     */
    to: RFCDate;
};

export type GetTimeoffWhosoutResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * Unexpected error
     */
    error?: shared.ErrorT | undefined;
    /**
     * Time off requests as seen by the logged in user for a given date range.
     */
    requests?: shared.Requests | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace GetTimeoffWhosoutRequest$ {
    export type Inbound = {
        from: string;
        includeHourly?: boolean | undefined;
        includePending?: boolean | undefined;
        includePrivate?: boolean | undefined;
        to: string;
    };

    export const inboundSchema: z.ZodType<GetTimeoffWhosoutRequest, z.ZodTypeDef, Inbound> = z
        .object({
            from: z.string().transform((v) => new RFCDate(v)),
            includeHourly: z.boolean().default(false),
            includePending: z.boolean().default(false),
            includePrivate: z.boolean().default(false),
            to: z.string().transform((v) => new RFCDate(v)),
        })
        .transform((v) => {
            return {
                from: v.from,
                ...(v.includeHourly === undefined ? null : { includeHourly: v.includeHourly }),
                ...(v.includePending === undefined ? null : { includePending: v.includePending }),
                ...(v.includePrivate === undefined ? null : { includePrivate: v.includePrivate }),
                to: v.to,
            };
        });

    export type Outbound = {
        from: string;
        includeHourly: boolean;
        includePending: boolean;
        includePrivate: boolean;
        to: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTimeoffWhosoutRequest> = z
        .object({
            from: z.instanceof(RFCDate).transform((v) => v.toString()),
            includeHourly: z.boolean().default(false),
            includePending: z.boolean().default(false),
            includePrivate: z.boolean().default(false),
            to: z.instanceof(RFCDate).transform((v) => v.toString()),
        })
        .transform((v) => {
            return {
                from: v.from,
                includeHourly: v.includeHourly,
                includePending: v.includePending,
                includePrivate: v.includePrivate,
                to: v.to,
            };
        });
}

/** @internal */
export namespace GetTimeoffWhosoutResponse$ {
    export type Inbound = {
        ContentType: string;
        Error?: shared.ErrorT$.Inbound | undefined;
        Requests?: shared.Requests$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<GetTimeoffWhosoutResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            Error: shared.ErrorT$.inboundSchema.optional(),
            Requests: shared.Requests$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.Error === undefined ? null : { error: v.Error }),
                ...(v.Requests === undefined ? null : { requests: v.Requests }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        Error?: shared.ErrorT$.Outbound | undefined;
        Requests?: shared.Requests$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTimeoffWhosoutResponse> = z
        .object({
            contentType: z.string(),
            error: shared.ErrorT$.outboundSchema.optional(),
            requests: shared.Requests$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.error === undefined ? null : { Error: v.error }),
                ...(v.requests === undefined ? null : { Requests: v.requests }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
