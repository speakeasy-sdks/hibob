/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../../../sdk/models/shared";
import { z } from "zod";

export type GetCompanyReportsDownloadReportNameRequest = {
    /**
     * Report name
     */
    reportName: string;
};

export type GetCompanyReportsDownloadReportNameResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * Unexpected error
     */
    error?: shared.ErrorT | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Include the report name and execution date in the report file. This defaults to true.
     */
    stream?: ReadableStream<Uint8Array> | undefined;
};

/** @internal */
export namespace GetCompanyReportsDownloadReportNameRequest$ {
    export type Inbound = {
        reportName: string;
    };

    export const inboundSchema: z.ZodType<
        GetCompanyReportsDownloadReportNameRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            reportName: z.string(),
        })
        .transform((v) => {
            return {
                reportName: v.reportName,
            };
        });

    export type Outbound = {
        reportName: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetCompanyReportsDownloadReportNameRequest
    > = z
        .object({
            reportName: z.string(),
        })
        .transform((v) => {
            return {
                reportName: v.reportName,
            };
        });
}

/** @internal */
export namespace GetCompanyReportsDownloadReportNameResponse$ {
    export type Inbound = {
        ContentType: string;
        Error?: shared.ErrorT$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
        stream?: ReadableStream<Uint8Array> | undefined;
    };

    export const inboundSchema: z.ZodType<
        GetCompanyReportsDownloadReportNameResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            Error: shared.ErrorT$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            stream: z.instanceof(ReadableStream<Uint8Array>).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.Error === undefined ? null : { error: v.Error }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.stream === undefined ? null : { stream: v.stream }),
            };
        });

    export type Outbound = {
        ContentType: string;
        Error?: shared.ErrorT$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
        stream?: ReadableStream<Uint8Array> | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetCompanyReportsDownloadReportNameResponse
    > = z
        .object({
            contentType: z.string(),
            error: shared.ErrorT$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            stream: z.instanceof(ReadableStream<Uint8Array>).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.error === undefined ? null : { Error: v.error }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.stream === undefined ? null : { stream: v.stream }),
            };
        });
}
