/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared";
import * as z from "zod";

export type GetPeopleCustomTablesEmployeeIdCustomTableIdRequest = {
    /**
     * The ID of custom table.
     */
    customTableId: string;
    /**
     * Employee ID.
     */
    employeeId: string;
    /**
     * Whether to include the additional "humanReadable" JSON node in the response.
     */
    includeHumanReadable?: boolean | undefined;
};

export type GetPeopleCustomTablesEmployeeIdCustomTableIdResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * Successful response
     */
    customTableEntriesList?: shared.CustomTableEntriesList | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace GetPeopleCustomTablesEmployeeIdCustomTableIdRequest$ {
    export type Inbound = {
        custom_table_id: string;
        employee_id: string;
        includeHumanReadable?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<
        GetPeopleCustomTablesEmployeeIdCustomTableIdRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            custom_table_id: z.string(),
            employee_id: z.string(),
            includeHumanReadable: z.boolean().default(false),
        })
        .transform((v) => {
            return {
                customTableId: v.custom_table_id,
                employeeId: v.employee_id,
                includeHumanReadable: v.includeHumanReadable,
            };
        });

    export type Outbound = {
        custom_table_id: string;
        employee_id: string;
        includeHumanReadable: boolean;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetPeopleCustomTablesEmployeeIdCustomTableIdRequest
    > = z
        .object({
            customTableId: z.string(),
            employeeId: z.string(),
            includeHumanReadable: z.boolean().default(false),
        })
        .transform((v) => {
            return {
                custom_table_id: v.customTableId,
                employee_id: v.employeeId,
                includeHumanReadable: v.includeHumanReadable,
            };
        });
}

/** @internal */
export namespace GetPeopleCustomTablesEmployeeIdCustomTableIdResponse$ {
    export type Inbound = {
        ContentType: string;
        CustomTableEntriesList?: shared.CustomTableEntriesList$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<
        GetPeopleCustomTablesEmployeeIdCustomTableIdResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            CustomTableEntriesList: shared.CustomTableEntriesList$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.CustomTableEntriesList === undefined
                    ? null
                    : { customTableEntriesList: v.CustomTableEntriesList }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        CustomTableEntriesList?: shared.CustomTableEntriesList$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetPeopleCustomTablesEmployeeIdCustomTableIdResponse
    > = z
        .object({
            contentType: z.string(),
            customTableEntriesList: shared.CustomTableEntriesList$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.customTableEntriesList === undefined
                    ? null
                    : { CustomTableEntriesList: v.customTableEntriesList }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
