/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../../../sdk/models/shared";
import { z } from "zod";

export type GetPeopleSecurity = {
    basic?: shared.SchemeBasic | undefined;
    bearer?: string | undefined;
};

export type GetPeopleRequest = {
    /**
     * Whether to supply humanReadable values in JSON instead of machine-readable format (default).
     */
    humanReadable?: boolean | undefined;
    /**
     * Whether to include the additional "humanReadable" JSON node in the response.
     */
    includeHumanReadable?: boolean | undefined;
    /**
     * Should include inactive employees.
     */
    showInactive?: boolean | undefined;
};

export type GetPeopleResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * All employees.
     */
    employees?: shared.Employees | undefined;
    /**
     * Unexpected error.
     */
    error?: shared.ErrorT | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace GetPeopleRequest$ {
    export type Inbound = {
        humanReadable?: boolean | undefined;
        includeHumanReadable?: boolean | undefined;
        showInactive?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<GetPeopleRequest, z.ZodTypeDef, Inbound> = z
        .object({
            humanReadable: z.boolean().default(false),
            includeHumanReadable: z.boolean().default(false),
            showInactive: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.humanReadable === undefined ? null : { humanReadable: v.humanReadable }),
                ...(v.includeHumanReadable === undefined
                    ? null
                    : { includeHumanReadable: v.includeHumanReadable }),
                ...(v.showInactive === undefined ? null : { showInactive: v.showInactive }),
            };
        });

    export type Outbound = {
        humanReadable: boolean;
        includeHumanReadable: boolean;
        showInactive?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetPeopleRequest> = z
        .object({
            humanReadable: z.boolean().default(false),
            includeHumanReadable: z.boolean().default(false),
            showInactive: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                humanReadable: v.humanReadable,
                includeHumanReadable: v.includeHumanReadable,
                ...(v.showInactive === undefined ? null : { showInactive: v.showInactive }),
            };
        });
}

/** @internal */
export namespace GetPeopleResponse$ {
    export type Inbound = {
        ContentType: string;
        Employees?: shared.Employees$.Inbound | undefined;
        Error?: shared.ErrorT$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<GetPeopleResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            Employees: shared.Employees$.inboundSchema.optional(),
            Error: shared.ErrorT$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.Employees === undefined ? null : { employees: v.Employees }),
                ...(v.Error === undefined ? null : { error: v.Error }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        Employees?: shared.Employees$.Outbound | undefined;
        Error?: shared.ErrorT$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetPeopleResponse> = z
        .object({
            contentType: z.string(),
            employees: shared.Employees$.outboundSchema.optional(),
            error: shared.ErrorT$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.employees === undefined ? null : { Employees: v.employees }),
                ...(v.error === undefined ? null : { Error: v.error }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
