/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as b64$ from "../../../lib/base64";
import * as shared from "../../../sdk/models/shared";
import { blobLikeSchema } from "../../../sdk/types";
import { z } from "zod";

export type FileT = {
    content: Uint8Array | string;
    fileName: string;
};

export type PostDocsPeopleIdConfidentialUploadRequestBody = {
    /**
     * The file to upload.
     */
    file: FileT | Blob;
};

export type PostDocsPeopleIdConfidentialUploadRequest = {
    requestBody: PostDocsPeopleIdConfidentialUploadRequestBody;
    /**
     * employee id
     */
    id: string;
};

export type PostDocsPeopleIdConfidentialUploadResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * Unexpected error
     */
    error?: shared.ErrorT | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace FileT$ {
    export type Inbound = {
        content: Uint8Array | string;
        fileName: string;
    };

    export const inboundSchema: z.ZodType<FileT, z.ZodTypeDef, Inbound> = z
        .object({
            content: b64$.zodInbound,
            fileName: z.string(),
        })
        .transform((v) => {
            return {
                content: v.content,
                fileName: v.fileName,
            };
        });

    export type Outbound = {
        content: Uint8Array;
        fileName: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FileT> = z
        .object({
            content: b64$.zodOutbound,
            fileName: z.string(),
        })
        .transform((v) => {
            return {
                content: v.content,
                fileName: v.fileName,
            };
        });
}

/** @internal */
export namespace PostDocsPeopleIdConfidentialUploadRequestBody$ {
    export type Inbound = {
        file: FileT$.Inbound;
    };

    export const inboundSchema: z.ZodType<
        PostDocsPeopleIdConfidentialUploadRequestBody,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            file: z.lazy(() => FileT$.inboundSchema),
        })
        .transform((v) => {
            return {
                file: v.file,
            };
        });

    export type Outbound = {
        file: FileT$.Outbound | Blob;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostDocsPeopleIdConfidentialUploadRequestBody
    > = z
        .object({
            file: z.lazy(() => FileT$.outboundSchema).or(blobLikeSchema),
        })
        .transform((v) => {
            return {
                file: v.file,
            };
        });
}

/** @internal */
export namespace PostDocsPeopleIdConfidentialUploadRequest$ {
    export type Inbound = {
        RequestBody: PostDocsPeopleIdConfidentialUploadRequestBody$.Inbound;
        id: string;
    };

    export const inboundSchema: z.ZodType<
        PostDocsPeopleIdConfidentialUploadRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            RequestBody: z.lazy(() => PostDocsPeopleIdConfidentialUploadRequestBody$.inboundSchema),
            id: z.string(),
        })
        .transform((v) => {
            return {
                requestBody: v.RequestBody,
                id: v.id,
            };
        });

    export type Outbound = {
        RequestBody: PostDocsPeopleIdConfidentialUploadRequestBody$.Outbound;
        id: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostDocsPeopleIdConfidentialUploadRequest
    > = z
        .object({
            requestBody: z.lazy(
                () => PostDocsPeopleIdConfidentialUploadRequestBody$.outboundSchema
            ),
            id: z.string(),
        })
        .transform((v) => {
            return {
                RequestBody: v.requestBody,
                id: v.id,
            };
        });
}

/** @internal */
export namespace PostDocsPeopleIdConfidentialUploadResponse$ {
    export type Inbound = {
        ContentType: string;
        Error?: shared.ErrorT$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<
        PostDocsPeopleIdConfidentialUploadResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            Error: shared.ErrorT$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.Error === undefined ? null : { error: v.Error }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        Error?: shared.ErrorT$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostDocsPeopleIdConfidentialUploadResponse
    > = z
        .object({
            contentType: z.string(),
            error: shared.ErrorT$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.error === undefined ? null : { Error: v.error }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
