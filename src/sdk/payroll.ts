/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import * as enc$ from "../lib/encodings";
import { HTTPClient } from "../lib/http";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as errors from "../sdk/models/errors";
import * as operations from "../sdk/models/operations";

export class Payroll extends ClientSDK {
    private readonly options$: SDKOptions;

    constructor(options: SDKOptions = {}) {
        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
        });

        this.options$ = options;
        void this.options$;
    }
    /**
     * Deletes an equity grant for an employee.
     *
     * @remarks
     * <b>Supported user types:</b> Employee, Service.
     */
    async deletePeopleIdEquitiesEntryId(
        input: operations.DeletePeopleIdEquitiesEntryIdRequest,
        security: operations.DeletePeopleIdEquitiesEntryIdSecurity,
        options?: RequestOptions
    ): Promise<operations.DeletePeopleIdEquitiesEntryIdResponse> {
        const headers = new Headers();
        headers.set("user-agent", SDK_METADATA.userAgent);
        headers.set("Accept", "*/*");

        const payload =
            operations.DeletePeopleIdEquitiesEntryIdRequest$.outboundSchema.parse(input);
        const body = null;

        const pathParams = {
            entry_id: enc$.encodeSimple("entry_id", payload.entry_id, {
                explode: false,
                charEncoding: "percent",
            }),
            id: enc$.encodeSimple("id", payload.id, { explode: false, charEncoding: "percent" }),
        };

        const path = this.templateURLComponent("/people/{id}/equities/{entry_id}")(pathParams);

        const securitySettings = this.resolveSecurity(
            [{ value: security?.basic, type: "http:basic" }],
            [{ value: security?.bearer, fieldName: "Authorization", type: "apiKey:header" }]
        );

        const response = await this.fetch$(
            { security: securitySettings, method: "delete", path, headers, body },
            options
        );

        const responseFields = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 200)) {
            // fallthrough
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.DeletePeopleIdEquitiesEntryIdResponse$.inboundSchema.parse(
            responseFields
        );
    }

    /**
     * Deletes a salary entry from the employee's list.
     *
     * @remarks
     * <b>Supported user types:</b> Employee, Service.
     */
    async deletePeopleIdSalariesEntryId(
        input: operations.DeletePeopleIdSalariesEntryIdRequest,
        security: operations.DeletePeopleIdSalariesEntryIdSecurity,
        options?: RequestOptions
    ): Promise<operations.DeletePeopleIdSalariesEntryIdResponse> {
        const headers = new Headers();
        headers.set("user-agent", SDK_METADATA.userAgent);
        headers.set("Accept", "*/*");

        const payload =
            operations.DeletePeopleIdSalariesEntryIdRequest$.outboundSchema.parse(input);
        const body = null;

        const pathParams = {
            entry_id: enc$.encodeSimple("entry_id", payload.entry_id, {
                explode: false,
                charEncoding: "percent",
            }),
            id: enc$.encodeSimple("id", payload.id, { explode: false, charEncoding: "percent" }),
        };

        const path = this.templateURLComponent("/people/{id}/salaries/{entry_id}")(pathParams);

        const securitySettings = this.resolveSecurity(
            [{ value: security?.basic, type: "http:basic" }],
            [{ value: security?.bearer, fieldName: "Authorization", type: "apiKey:header" }]
        );

        const response = await this.fetch$(
            { security: securitySettings, method: "delete", path, headers, body },
            options
        );

        const responseFields = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 200)) {
            // fallthrough
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.DeletePeopleIdSalariesEntryIdResponse$.inboundSchema.parse(
            responseFields
        );
    }

    /**
     * Deletes any training records for an employee.
     *
     * @remarks
     * <b>Supported user types:</b> Employee, Service.
     */
    async deletePeopleIdTrainingEntryId(
        input: operations.DeletePeopleIdTrainingEntryIdRequest,
        security: operations.DeletePeopleIdTrainingEntryIdSecurity,
        options?: RequestOptions
    ): Promise<operations.DeletePeopleIdTrainingEntryIdResponse> {
        const headers = new Headers();
        headers.set("user-agent", SDK_METADATA.userAgent);
        headers.set("Accept", "*/*");

        const payload =
            operations.DeletePeopleIdTrainingEntryIdRequest$.outboundSchema.parse(input);
        const body = null;

        const pathParams = {
            entry_id: enc$.encodeSimple("entry_id", payload.entry_id, {
                explode: false,
                charEncoding: "percent",
            }),
            id: enc$.encodeSimple("id", payload.id, { explode: false, charEncoding: "percent" }),
        };

        const path = this.templateURLComponent("/people/{id}/training/{entry_id}")(pathParams);

        const securitySettings = this.resolveSecurity(
            [{ value: security?.basic, type: "http:basic" }],
            [{ value: security?.bearer, fieldName: "Authorization", type: "apiKey:header" }]
        );

        const response = await this.fetch$(
            { security: securitySettings, method: "delete", path, headers, body },
            options
        );

        const responseFields = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 200)) {
            // fallthrough
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.DeletePeopleIdTrainingEntryIdResponse$.inboundSchema.parse(
            responseFields
        );
    }

    /**
     * Deletes a training record for an employee.
     *
     * @remarks
     * <b>Supported user types:</b> Employee, Service.
     */
    async deletePeopleIdVariableEntryId(
        input: operations.DeletePeopleIdVariableEntryIdRequest,
        security: operations.DeletePeopleIdVariableEntryIdSecurity,
        options?: RequestOptions
    ): Promise<operations.DeletePeopleIdVariableEntryIdResponse> {
        const headers = new Headers();
        headers.set("user-agent", SDK_METADATA.userAgent);
        headers.set("Accept", "*/*");

        const payload =
            operations.DeletePeopleIdVariableEntryIdRequest$.outboundSchema.parse(input);
        const body = null;

        const pathParams = {
            entry_id: enc$.encodeSimple("entry_id", payload.entry_id, {
                explode: false,
                charEncoding: "percent",
            }),
            id: enc$.encodeSimple("id", payload.id, { explode: false, charEncoding: "percent" }),
        };

        const path = this.templateURLComponent("/people/{id}/variable/{entry_id}")(pathParams);

        const securitySettings = this.resolveSecurity(
            [{ value: security?.basic, type: "http:basic" }],
            [{ value: security?.bearer, fieldName: "Authorization", type: "apiKey:header" }]
        );

        const response = await this.fetch$(
            { security: securitySettings, method: "delete", path, headers, body },
            options
        );

        const responseFields = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 200)) {
            // fallthrough
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.DeletePeopleIdVariableEntryIdResponse$.inboundSchema.parse(
            responseFields
        );
    }

    /**
     * Read payroll history.
     *
     * @remarks
     * <b>Supported user types:</b> Employee
     */
    async getPayrollHistory(
        input: operations.GetPayrollHistoryRequest,
        options?: RequestOptions
    ): Promise<operations.GetPayrollHistoryResponse> {
        const headers = new Headers();
        headers.set("user-agent", SDK_METADATA.userAgent);
        headers.set("Accept", "application/json");

        const payload = operations.GetPayrollHistoryRequest$.outboundSchema.parse(input);
        const body = null;

        const path = this.templateURLComponent("/payroll/history")();

        const query = [
            enc$.encodeForm("department", payload.department, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("showInactive", payload.showInactive, {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        const security =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings = this.resolveGlobalSecurity(security);

        const response = await this.fetch$(
            { security: securitySettings, method: "get", path, headers, query, body },
            options
        );

        const responseFields = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetPayrollHistoryResponse$.inboundSchema.parse({
                ...responseFields,
                Employees: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, "default", "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetPayrollHistoryResponse$.inboundSchema.parse({
                ...responseFields,
                Error: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * List the employee's equity grants.
     *
     * @remarks
     * Returns a list of equity grants for a given employee.<br /><b>Supported user types:</b> Employee, Service<br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How to work with lists Public API</a>.
     */
    async getPeopleIdEquities(
        input: operations.GetPeopleIdEquitiesRequest,
        security: operations.GetPeopleIdEquitiesSecurity,
        options?: RequestOptions
    ): Promise<operations.GetPeopleIdEquitiesResponse> {
        const headers = new Headers();
        headers.set("user-agent", SDK_METADATA.userAgent);
        headers.set("Accept", "application/json");

        const payload = operations.GetPeopleIdEquitiesRequest$.outboundSchema.parse(input);
        const body = null;

        const pathParams = {
            id: enc$.encodeSimple("id", payload.id, { explode: false, charEncoding: "percent" }),
        };

        const path = this.templateURLComponent("/people/{id}/equities")(pathParams);

        const securitySettings = this.resolveSecurity(
            [{ value: security?.basic, type: "http:basic" }],
            [{ value: security?.bearer, fieldName: "Authorization", type: "apiKey:header" }]
        );

        const response = await this.fetch$(
            { security: securitySettings, method: "get", path, headers, body },
            options
        );

        const responseFields = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetPeopleIdEquitiesResponse$.inboundSchema.parse({
                ...responseFields,
                EquityEntries: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * List employee's salary history.
     *
     * @remarks
     * Returns a list of salary history entries for a given employee.<br /><b>Supported user types:</b> Employee, Service<br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How to work with lists Public API</a>.
     */
    async getPeopleIdSalaries(
        input: operations.GetPeopleIdSalariesRequest,
        security: operations.GetPeopleIdSalariesSecurity,
        options?: RequestOptions
    ): Promise<operations.GetPeopleIdSalariesResponse> {
        const headers = new Headers();
        headers.set("user-agent", SDK_METADATA.userAgent);
        headers.set("Accept", "application/json");

        const payload = operations.GetPeopleIdSalariesRequest$.outboundSchema.parse(input);
        const body = null;

        const pathParams = {
            id: enc$.encodeSimple("id", payload.id, { explode: false, charEncoding: "percent" }),
        };

        const path = this.templateURLComponent("/people/{id}/salaries")(pathParams);

        const securitySettings = this.resolveSecurity(
            [{ value: security?.basic, type: "http:basic" }],
            [{ value: security?.bearer, fieldName: "Authorization", type: "apiKey:header" }]
        );

        const response = await this.fetch$(
            { security: securitySettings, method: "get", path, headers, body },
            options
        );

        const responseFields = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetPeopleIdSalariesResponse$.inboundSchema.parse({
                ...responseFields,
                SalaryEntries: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * List the employee's training records.
     *
     * @remarks
     * Returns a list of training records for a given employee<br /><b>Supported user types:</b> Employee, Service<br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How to work with lists Public API</a>.
     */
    async getPeopleIdTraining(
        input: operations.GetPeopleIdTrainingRequest,
        security: operations.GetPeopleIdTrainingSecurity,
        options?: RequestOptions
    ): Promise<operations.GetPeopleIdTrainingResponse> {
        const headers = new Headers();
        headers.set("user-agent", SDK_METADATA.userAgent);
        headers.set("Accept", "application/json");

        const payload = operations.GetPeopleIdTrainingRequest$.outboundSchema.parse(input);
        const body = null;

        const pathParams = {
            id: enc$.encodeSimple("id", payload.id, { explode: false, charEncoding: "percent" }),
        };

        const path = this.templateURLComponent("/people/{id}/training")(pathParams);

        const securitySettings = this.resolveSecurity(
            [{ value: security?.basic, type: "http:basic" }],
            [{ value: security?.bearer, fieldName: "Authorization", type: "apiKey:header" }]
        );

        const response = await this.fetch$(
            { security: securitySettings, method: "get", path, headers, body },
            options
        );

        const responseFields = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetPeopleIdTrainingResponse$.inboundSchema.parse({
                ...responseFields,
                TrainingEntries: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * List employee's variable payments
     *
     * @remarks
     * Returns a list of variable payments for a given employee.<br /><b>Supported user types:</b> Employee<br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How to work with lists Public API</a>.
     */
    async getPeopleIdVariable(
        input: operations.GetPeopleIdVariableRequest,
        options?: RequestOptions
    ): Promise<operations.GetPeopleIdVariableResponse> {
        const headers = new Headers();
        headers.set("user-agent", SDK_METADATA.userAgent);
        headers.set("Accept", "application/json");

        const payload = operations.GetPeopleIdVariableRequest$.outboundSchema.parse(input);
        const body = null;

        const pathParams = {
            id: enc$.encodeSimple("id", payload.id, { explode: false, charEncoding: "percent" }),
        };

        const path = this.templateURLComponent("/people/{id}/variable")(pathParams);

        const security =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings = this.resolveGlobalSecurity(security);

        const response = await this.fetch$(
            { security: securitySettings, method: "get", path, headers, body },
            options
        );

        const responseFields = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetPeopleIdVariableResponse$.inboundSchema.parse({
                ...responseFields,
                VariableEntries: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Creates a new equity grant for a given employee.
     *
     * @remarks
     * <b>Supported user types:</b> Employee, Service<br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How to work with lists Public API</a>.
     */
    async postPeopleIdEquities(
        input: operations.PostPeopleIdEquitiesRequest,
        security: operations.PostPeopleIdEquitiesSecurity,
        options?: RequestOptions
    ): Promise<operations.PostPeopleIdEquitiesResponse> {
        const headers = new Headers();
        headers.set("user-agent", SDK_METADATA.userAgent);
        headers.set("Content-Type", "application/json");
        headers.set("Accept", "*/*");

        const payload = operations.PostPeopleIdEquitiesRequest$.outboundSchema.parse(input);

        const body = enc$.encodeJSON("body", payload.EquityEntry, { explode: true });

        const pathParams = {
            id: enc$.encodeSimple("id", payload.id, { explode: false, charEncoding: "percent" }),
        };

        const path = this.templateURLComponent("/people/{id}/equities")(pathParams);

        const securitySettings = this.resolveSecurity(
            [{ value: security?.basic, type: "http:basic" }],
            [{ value: security?.bearer, fieldName: "Authorization", type: "apiKey:header" }]
        );

        const response = await this.fetch$(
            { security: securitySettings, method: "post", path, headers, body },
            options
        );

        const responseFields = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 200)) {
            // fallthrough
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.PostPeopleIdEquitiesResponse$.inboundSchema.parse(responseFields);
    }

    /**
     * Creates a new salary entry for a given employee.
     *
     * @remarks
     * <b>Supported user types:</b> Employee, Service<br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How to work with lists Public API</a>.
     */
    async postPeopleIdSalaries(
        input: operations.PostPeopleIdSalariesRequest,
        security: operations.PostPeopleIdSalariesSecurity,
        options?: RequestOptions
    ): Promise<operations.PostPeopleIdSalariesResponse> {
        const headers = new Headers();
        headers.set("user-agent", SDK_METADATA.userAgent);
        headers.set("Content-Type", "application/json");
        headers.set("Accept", "*/*");

        const payload = operations.PostPeopleIdSalariesRequest$.outboundSchema.parse(input);

        const body = enc$.encodeJSON("body", payload.SalaryEntry, { explode: true });

        const pathParams = {
            id: enc$.encodeSimple("id", payload.id, { explode: false, charEncoding: "percent" }),
        };

        const path = this.templateURLComponent("/people/{id}/salaries")(pathParams);

        const securitySettings = this.resolveSecurity(
            [{ value: security?.basic, type: "http:basic" }],
            [{ value: security?.bearer, fieldName: "Authorization", type: "apiKey:header" }]
        );

        const response = await this.fetch$(
            { security: securitySettings, method: "post", path, headers, body },
            options
        );

        const responseFields = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 200)) {
            // fallthrough
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.PostPeopleIdSalariesResponse$.inboundSchema.parse(responseFields);
    }

    /**
     * Creates a new training records for a given employee
     *
     * @remarks
     * <b>Supported user types:</b> Employee, Service<br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How to work with lists Public API</a>.
     */
    async postPeopleIdTraining(
        input: operations.PostPeopleIdTrainingRequest,
        security: operations.PostPeopleIdTrainingSecurity,
        options?: RequestOptions
    ): Promise<operations.PostPeopleIdTrainingResponse> {
        const headers = new Headers();
        headers.set("user-agent", SDK_METADATA.userAgent);
        headers.set("Content-Type", "application/json");
        headers.set("Accept", "*/*");

        const payload = operations.PostPeopleIdTrainingRequest$.outboundSchema.parse(input);

        const body = enc$.encodeJSON("body", payload.TrainingEntry, { explode: true });

        const pathParams = {
            id: enc$.encodeSimple("id", payload.id, { explode: false, charEncoding: "percent" }),
        };

        const path = this.templateURLComponent("/people/{id}/training")(pathParams);

        const securitySettings = this.resolveSecurity(
            [{ value: security?.basic, type: "http:basic" }],
            [{ value: security?.bearer, fieldName: "Authorization", type: "apiKey:header" }]
        );

        const response = await this.fetch$(
            { security: securitySettings, method: "post", path, headers, body },
            options
        );

        const responseFields = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 200)) {
            // fallthrough
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.PostPeopleIdTrainingResponse$.inboundSchema.parse(responseFields);
    }

    /**
     * Creates a new variable payment for a given employee.
     *
     * @remarks
     * <b>Supported user types:</b> Employee, Service<br><br><b>Note</b>:The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How to work with lists Public API</a>.
     */
    async postPeopleIdVariable(
        input: operations.PostPeopleIdVariableRequest,
        security: operations.PostPeopleIdVariableSecurity,
        options?: RequestOptions
    ): Promise<operations.PostPeopleIdVariableResponse> {
        const headers = new Headers();
        headers.set("user-agent", SDK_METADATA.userAgent);
        headers.set("Content-Type", "application/json");
        headers.set("Accept", "*/*");

        const payload = operations.PostPeopleIdVariableRequest$.outboundSchema.parse(input);

        const body = enc$.encodeJSON("body", payload.VariableEntry, { explode: true });

        const pathParams = {
            id: enc$.encodeSimple("id", payload.id, { explode: false, charEncoding: "percent" }),
        };

        const path = this.templateURLComponent("/people/{id}/variable")(pathParams);

        const securitySettings = this.resolveSecurity(
            [{ value: security?.basic, type: "http:basic" }],
            [{ value: security?.bearer, fieldName: "Authorization", type: "apiKey:header" }]
        );

        const response = await this.fetch$(
            { security: securitySettings, method: "post", path, headers, body },
            options
        );

        const responseFields = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 200)) {
            // fallthrough
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.PostPeopleIdVariableResponse$.inboundSchema.parse(responseFields);
    }

    /**
     * Updates an equity grant for an employee
     *
     * @remarks
     * <b>Supported user types:</b> Employee, Service<br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How to work with lists Public API</a>. - Basic: [] - Bearer: []
     */
    async putPeopleIdEquitiesEntryId(
        input: operations.PutPeopleIdEquitiesEntryIdRequest,
        security: operations.PutPeopleIdEquitiesEntryIdSecurity,
        options?: RequestOptions
    ): Promise<operations.PutPeopleIdEquitiesEntryIdResponse> {
        const headers = new Headers();
        headers.set("user-agent", SDK_METADATA.userAgent);
        headers.set("Content-Type", "application/json");
        headers.set("Accept", "*/*");

        const payload = operations.PutPeopleIdEquitiesEntryIdRequest$.outboundSchema.parse(input);

        const body = enc$.encodeJSON("body", payload.EquityEntry, { explode: true });

        const pathParams = {
            entry_id: enc$.encodeSimple("entry_id", payload.entry_id, {
                explode: false,
                charEncoding: "percent",
            }),
            id: enc$.encodeSimple("id", payload.id, { explode: false, charEncoding: "percent" }),
        };

        const path = this.templateURLComponent("/people/{id}/equities/{entry_id}")(pathParams);

        const securitySettings = this.resolveSecurity(
            [{ value: security?.basic, type: "http:basic" }],
            [{ value: security?.bearer, fieldName: "Authorization", type: "apiKey:header" }]
        );

        const response = await this.fetch$(
            { security: securitySettings, method: "put", path, headers, body },
            options
        );

        const responseFields = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 200)) {
            // fallthrough
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.PutPeopleIdEquitiesEntryIdResponse$.inboundSchema.parse(responseFields);
    }
}
