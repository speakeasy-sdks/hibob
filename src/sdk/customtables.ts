/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as errors from "./models/errors";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { SDKConfiguration } from "./sdk";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class CustomTables {
    private sdkConfiguration: SDKConfiguration;

    constructor(sdkConfig: SDKConfiguration) {
        this.sdkConfiguration = sdkConfig;
    }

    /**
     * Delete custom table entry
     *
     * @remarks
     * <b>Supported user types:</b> Employee, Service.
     */
    async deletePeopleCustomTablesEmployeeIdCustomTableIdEntryId(
        req: operations.DeletePeopleCustomTablesEmployeeIdCustomTableIdEntryIdRequest,
        security: operations.DeletePeopleCustomTablesEmployeeIdCustomTableIdEntryIdSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.DeletePeopleCustomTablesEmployeeIdCustomTableIdEntryIdResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DeletePeopleCustomTablesEmployeeIdCustomTableIdEntryIdRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/people/custom-tables/{employee_id}/{custom_table_id}/{entry_id}",
            req
        );
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        if (!(security instanceof utils.SpeakeasyBase)) {
            security =
                new operations.DeletePeopleCustomTablesEmployeeIdCustomTableIdEntryIdSecurity(
                    security
                );
        }
        const properties = utils.parseSecurityProperties(security);
        const headers = { ...config?.headers, ...properties.headers };
        headers["Accept"] = "*/*";

        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion} ${this.sdkConfiguration.openapiDocVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "delete",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.DeletePeopleCustomTablesEmployeeIdCustomTableIdEntryIdResponse =
            new operations.DeletePeopleCustomTablesEmployeeIdCustomTableIdEntryIdResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            case httpRes?.status == 200:
                break;
        }

        return res;
    }

    /**
     * Read all entries of the given custom table
     *
     * @remarks
     * <b>Supported user types:</b> Employee, Service.
     */
    async getPeopleCustomTablesEmployeeIdCustomTableId(
        req: operations.GetPeopleCustomTablesEmployeeIdCustomTableIdRequest,
        security: operations.GetPeopleCustomTablesEmployeeIdCustomTableIdSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.GetPeopleCustomTablesEmployeeIdCustomTableIdResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetPeopleCustomTablesEmployeeIdCustomTableIdRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/people/custom-tables/{employee_id}/{custom_table_id}",
            req
        );
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.GetPeopleCustomTablesEmployeeIdCustomTableIdSecurity(
                security
            );
        }
        const properties = utils.parseSecurityProperties(security);
        const headers = { ...config?.headers, ...properties.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        headers["Accept"] = "application/json";

        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion} ${this.sdkConfiguration.openapiDocVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "get",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetPeopleCustomTablesEmployeeIdCustomTableIdResponse =
            new operations.GetPeopleCustomTablesEmployeeIdCustomTableIdResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.customTableEntriesList = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.CustomTableEntriesList
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Create new custom table entry
     *
     * @remarks
     * <b>Supported user types:</b> Employee, Service.
     */
    async postPeopleCustomTablesEmployeeIdCustomTableId(
        req: operations.PostPeopleCustomTablesEmployeeIdCustomTableIdRequest,
        security: operations.PostPeopleCustomTablesEmployeeIdCustomTableIdSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.PostPeopleCustomTablesEmployeeIdCustomTableIdResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.PostPeopleCustomTablesEmployeeIdCustomTableIdRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/people/custom-tables/{employee_id}/{custom_table_id}",
            req
        );

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "requestBody", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.PostPeopleCustomTablesEmployeeIdCustomTableIdSecurity(
                security
            );
        }
        const properties = utils.parseSecurityProperties(security);
        const headers = { ...reqBodyHeaders, ...config?.headers, ...properties.headers };
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] = "*/*";

        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion} ${this.sdkConfiguration.openapiDocVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            responseType: "arraybuffer",
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.PostPeopleCustomTablesEmployeeIdCustomTableIdResponse =
            new operations.PostPeopleCustomTablesEmployeeIdCustomTableIdResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            case httpRes?.status == 200:
                break;
        }

        return res;
    }

    /**
     * Update custom table entry
     *
     * @remarks
     * <b>Supported user types:</b> Employee, Service.
     */
    async putPeopleCustomTablesEmployeeIdCustomTableIdEntryId(
        req: operations.PutPeopleCustomTablesEmployeeIdCustomTableIdEntryIdRequest,
        security: operations.PutPeopleCustomTablesEmployeeIdCustomTableIdEntryIdSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.PutPeopleCustomTablesEmployeeIdCustomTableIdEntryIdResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.PutPeopleCustomTablesEmployeeIdCustomTableIdEntryIdRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/people/custom-tables/{employee_id}/{custom_table_id}/{entry_id}",
            req
        );

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "requestBody", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.PutPeopleCustomTablesEmployeeIdCustomTableIdEntryIdSecurity(
                security
            );
        }
        const properties = utils.parseSecurityProperties(security);
        const headers = { ...reqBodyHeaders, ...config?.headers, ...properties.headers };
        headers["Accept"] = "*/*";

        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion} ${this.sdkConfiguration.openapiDocVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "put",
            headers: headers,
            responseType: "arraybuffer",
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.PutPeopleCustomTablesEmployeeIdCustomTableIdEntryIdResponse =
            new operations.PutPeopleCustomTablesEmployeeIdCustomTableIdEntryIdResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            case httpRes?.status == 200:
                break;
        }

        return res;
    }
}
