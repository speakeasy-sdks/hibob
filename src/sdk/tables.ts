/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import * as enc$ from "../lib/encodings";
import { HTTPClient } from "../lib/http";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as errors from "../sdk/models/errors";
import * as operations from "../sdk/models/operations";

export class Tables extends ClientSDK {
    private readonly options$: SDKOptions;

    constructor(options: SDKOptions = {}) {
        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
        });

        this.options$ = options;
        void this.options$;
    }
    /**
     * Deletes an employment entry from a given employee's employment history.
     *
     * @remarks
     * <b>Supported user types:</b> Employee, Service.
     */
    async deletePeopleIdEmploymentEntryId(
        input: operations.DeletePeopleIdEmploymentEntryIdRequest,
        security: operations.DeletePeopleIdEmploymentEntryIdSecurity,
        options?: RequestOptions
    ): Promise<operations.DeletePeopleIdEmploymentEntryIdResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "*/*");

        const payload$ =
            operations.DeletePeopleIdEmploymentEntryIdRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            entry_id: enc$.encodeSimple("entry_id", payload$.entry_id, {
                explode: false,
                charEncoding: "percent",
            }),
            id: enc$.encodeSimple("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };

        const path$ = this.templateURLComponent("/people/{id}/employment/{entry_id}")(pathParams$);

        const securitySettings$ = this.resolveSecurity(
            [{ value: security?.basic, type: "http:basic" }],
            [{ value: security?.bearer, fieldName: "Authorization", type: "apiKey:header" }]
        );

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "DELETE",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 200)) {
            // fallthrough
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.DeletePeopleIdEmploymentEntryIdResponse$.inboundSchema.parse(
            responseFields$
        );
    }

    /**
     * Deletes an equity grant for an employee.
     *
     * @remarks
     * <b>Supported user types:</b> Employee, Service.
     */
    async deletePeopleIdEquitiesEntryId(
        input: operations.DeletePeopleIdEquitiesEntryIdRequest,
        security: operations.DeletePeopleIdEquitiesEntryIdSecurity,
        options?: RequestOptions
    ): Promise<operations.DeletePeopleIdEquitiesEntryIdResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "*/*");

        const payload$ =
            operations.DeletePeopleIdEquitiesEntryIdRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            entry_id: enc$.encodeSimple("entry_id", payload$.entry_id, {
                explode: false,
                charEncoding: "percent",
            }),
            id: enc$.encodeSimple("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };

        const path$ = this.templateURLComponent("/people/{id}/equities/{entry_id}")(pathParams$);

        const securitySettings$ = this.resolveSecurity(
            [{ value: security?.basic, type: "http:basic" }],
            [{ value: security?.bearer, fieldName: "Authorization", type: "apiKey:header" }]
        );

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "DELETE",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 200)) {
            // fallthrough
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.DeletePeopleIdEquitiesEntryIdResponse$.inboundSchema.parse(
            responseFields$
        );
    }

    /**
     * Deletes a salary entry from the employee's list.
     *
     * @remarks
     * <b>Supported user types:</b> Employee, Service.
     */
    async deletePeopleIdSalariesEntryId(
        input: operations.DeletePeopleIdSalariesEntryIdRequest,
        security: operations.DeletePeopleIdSalariesEntryIdSecurity,
        options?: RequestOptions
    ): Promise<operations.DeletePeopleIdSalariesEntryIdResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "*/*");

        const payload$ =
            operations.DeletePeopleIdSalariesEntryIdRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            entry_id: enc$.encodeSimple("entry_id", payload$.entry_id, {
                explode: false,
                charEncoding: "percent",
            }),
            id: enc$.encodeSimple("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };

        const path$ = this.templateURLComponent("/people/{id}/salaries/{entry_id}")(pathParams$);

        const securitySettings$ = this.resolveSecurity(
            [{ value: security?.basic, type: "http:basic" }],
            [{ value: security?.bearer, fieldName: "Authorization", type: "apiKey:header" }]
        );

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "DELETE",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 200)) {
            // fallthrough
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.DeletePeopleIdSalariesEntryIdResponse$.inboundSchema.parse(
            responseFields$
        );
    }

    /**
     * Deletes any training records for an employee.
     *
     * @remarks
     * <b>Supported user types:</b> Employee, Service.
     */
    async deletePeopleIdTrainingEntryId(
        input: operations.DeletePeopleIdTrainingEntryIdRequest,
        security: operations.DeletePeopleIdTrainingEntryIdSecurity,
        options?: RequestOptions
    ): Promise<operations.DeletePeopleIdTrainingEntryIdResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "*/*");

        const payload$ =
            operations.DeletePeopleIdTrainingEntryIdRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            entry_id: enc$.encodeSimple("entry_id", payload$.entry_id, {
                explode: false,
                charEncoding: "percent",
            }),
            id: enc$.encodeSimple("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };

        const path$ = this.templateURLComponent("/people/{id}/training/{entry_id}")(pathParams$);

        const securitySettings$ = this.resolveSecurity(
            [{ value: security?.basic, type: "http:basic" }],
            [{ value: security?.bearer, fieldName: "Authorization", type: "apiKey:header" }]
        );

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "DELETE",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 200)) {
            // fallthrough
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.DeletePeopleIdTrainingEntryIdResponse$.inboundSchema.parse(
            responseFields$
        );
    }

    /**
     * Deletes a training record for an employee.
     *
     * @remarks
     * <b>Supported user types:</b> Employee, Service.
     */
    async deletePeopleIdVariableEntryId(
        input: operations.DeletePeopleIdVariableEntryIdRequest,
        security: operations.DeletePeopleIdVariableEntryIdSecurity,
        options?: RequestOptions
    ): Promise<operations.DeletePeopleIdVariableEntryIdResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "*/*");

        const payload$ =
            operations.DeletePeopleIdVariableEntryIdRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            entry_id: enc$.encodeSimple("entry_id", payload$.entry_id, {
                explode: false,
                charEncoding: "percent",
            }),
            id: enc$.encodeSimple("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };

        const path$ = this.templateURLComponent("/people/{id}/variable/{entry_id}")(pathParams$);

        const securitySettings$ = this.resolveSecurity(
            [{ value: security?.basic, type: "http:basic" }],
            [{ value: security?.bearer, fieldName: "Authorization", type: "apiKey:header" }]
        );

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "DELETE",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 200)) {
            // fallthrough
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.DeletePeopleIdVariableEntryIdResponse$.inboundSchema.parse(
            responseFields$
        );
    }

    /**
     * Deletes a work entry from a given employee's work history.
     *
     * @remarks
     * <b>Supported user types:</b> Employee, Service
     */
    async deletePeopleIdWorkEntryId(
        input: operations.DeletePeopleIdWorkEntryIdRequest,
        security: operations.DeletePeopleIdWorkEntryIdSecurity,
        options?: RequestOptions
    ): Promise<operations.DeletePeopleIdWorkEntryIdResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "*/*");

        const payload$ = operations.DeletePeopleIdWorkEntryIdRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            entry_id: enc$.encodeSimple("entry_id", payload$.entry_id, {
                explode: false,
                charEncoding: "percent",
            }),
            id: enc$.encodeSimple("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };

        const path$ = this.templateURLComponent("/people/{id}/work/{entry_id}")(pathParams$);

        const securitySettings$ = this.resolveSecurity(
            [{ value: security?.basic, type: "http:basic" }],
            [{ value: security?.bearer, fieldName: "Authorization", type: "apiKey:header" }]
        );

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "DELETE",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 200)) {
            // fallthrough
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.DeletePeopleIdWorkEntryIdResponse$.inboundSchema.parse(responseFields$);
    }

    /**
     * List employee's employment history.
     *
     * @remarks
     * <b>Note:</b> Changes to this API are planned to take effect on May 31, 2024.  Make sure to review all of the details in the <a href='https://help.hibob.com/hc/en-us/articles/19726260483601'>Working pattern API Changes</a>  article in the help center.<br> <br>Returns a list of employment history entries for a given employee.<br /><b>Supported user types:</b> Employee, Service<br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How to work with lists Public API</a>. - Basic: [] - Bearer: []
     */
    async getPeopleIdEmployment(
        input: operations.GetPeopleIdEmploymentRequest,
        security: operations.GetPeopleIdEmploymentSecurity,
        options?: RequestOptions
    ): Promise<operations.GetPeopleIdEmploymentResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.GetPeopleIdEmploymentRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            id: enc$.encodeSimple("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };

        const path$ = this.templateURLComponent("/people/{id}/employment")(pathParams$);

        const securitySettings$ = this.resolveSecurity(
            [{ value: security?.basic, type: "http:basic" }],
            [{ value: security?.bearer, fieldName: "Authorization", type: "apiKey:header" }]
        );

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetPeopleIdEmploymentResponse$.inboundSchema.parse({
                ...responseFields$,
                EmploymentEntries: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * List the employee's equity grants.
     *
     * @remarks
     * Returns a list of equity grants for a given employee.<br /><b>Supported user types:</b> Employee, Service<br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How to work with lists Public API</a>.
     */
    async getPeopleIdEquities(
        input: operations.GetPeopleIdEquitiesRequest,
        security: operations.GetPeopleIdEquitiesSecurity,
        options?: RequestOptions
    ): Promise<operations.GetPeopleIdEquitiesResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.GetPeopleIdEquitiesRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            id: enc$.encodeSimple("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };

        const path$ = this.templateURLComponent("/people/{id}/equities")(pathParams$);

        const securitySettings$ = this.resolveSecurity(
            [{ value: security?.basic, type: "http:basic" }],
            [{ value: security?.bearer, fieldName: "Authorization", type: "apiKey:header" }]
        );

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetPeopleIdEquitiesResponse$.inboundSchema.parse({
                ...responseFields$,
                EquityEntries: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * List employee's life-cycle status history.
     *
     * @remarks
     * Returns a list of life-cycle history entries for a given employee.<br /><b>Supported user types:</b> Employee, Service<br><br><b>Note</b>: TThe values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How to work with lists Public API</a>.
     */
    async getPeopleIdLifecycle(
        input: operations.GetPeopleIdLifecycleRequest,
        security: operations.GetPeopleIdLifecycleSecurity,
        options?: RequestOptions
    ): Promise<operations.GetPeopleIdLifecycleResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.GetPeopleIdLifecycleRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            id: enc$.encodeSimple("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };

        const path$ = this.templateURLComponent("/people/{id}/lifecycle")(pathParams$);

        const securitySettings$ = this.resolveSecurity(
            [{ value: security?.basic, type: "http:basic" }],
            [{ value: security?.bearer, fieldName: "Authorization", type: "apiKey:header" }]
        );

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetPeopleIdLifecycleResponse$.inboundSchema.parse({
                ...responseFields$,
                LifeCycleEntries: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * List employee's salary history.
     *
     * @remarks
     * Returns a list of salary history entries for a given employee.<br /><b>Supported user types:</b> Employee, Service<br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How to work with lists Public API</a>.
     */
    async getPeopleIdSalaries(
        input: operations.GetPeopleIdSalariesRequest,
        security: operations.GetPeopleIdSalariesSecurity,
        options?: RequestOptions
    ): Promise<operations.GetPeopleIdSalariesResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.GetPeopleIdSalariesRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            id: enc$.encodeSimple("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };

        const path$ = this.templateURLComponent("/people/{id}/salaries")(pathParams$);

        const securitySettings$ = this.resolveSecurity(
            [{ value: security?.basic, type: "http:basic" }],
            [{ value: security?.bearer, fieldName: "Authorization", type: "apiKey:header" }]
        );

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetPeopleIdSalariesResponse$.inboundSchema.parse({
                ...responseFields$,
                SalaryEntries: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * List the employee's training records.
     *
     * @remarks
     * Returns a list of training records for a given employee<br /><b>Supported user types:</b> Employee, Service<br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How to work with lists Public API</a>.
     */
    async getPeopleIdTraining(
        input: operations.GetPeopleIdTrainingRequest,
        security: operations.GetPeopleIdTrainingSecurity,
        options?: RequestOptions
    ): Promise<operations.GetPeopleIdTrainingResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.GetPeopleIdTrainingRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            id: enc$.encodeSimple("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };

        const path$ = this.templateURLComponent("/people/{id}/training")(pathParams$);

        const securitySettings$ = this.resolveSecurity(
            [{ value: security?.basic, type: "http:basic" }],
            [{ value: security?.bearer, fieldName: "Authorization", type: "apiKey:header" }]
        );

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetPeopleIdTrainingResponse$.inboundSchema.parse({
                ...responseFields$,
                TrainingEntries: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * List employee's variable payments
     *
     * @remarks
     * Returns a list of variable payments for a given employee.<br /><b>Supported user types:</b> Employee, Service.<br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How to work with lists Public API</a>.
     */
    async getPeopleIdVariable(
        input: operations.GetPeopleIdVariableRequest,
        security: operations.GetPeopleIdVariableSecurity,
        options?: RequestOptions
    ): Promise<operations.GetPeopleIdVariableResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.GetPeopleIdVariableRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            id: enc$.encodeSimple("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };

        const path$ = this.templateURLComponent("/people/{id}/variable")(pathParams$);

        const securitySettings$ = this.resolveSecurity(
            [{ value: security?.basic, type: "http:basic" }],
            [{ value: security?.bearer, fieldName: "Authorization", type: "apiKey:header" }]
        );

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetPeopleIdVariableResponse$.inboundSchema.parse({
                ...responseFields$,
                VariableEntries: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * List employee's work history
     *
     * @remarks
     * Returns a list of work history entries for a given employee.<br /><b>Supported user types:</b> Employee, Service.<br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How to work with lists Public API</a>.
     */
    async getPeopleIdWork(
        input: operations.GetPeopleIdWorkRequest,
        security: operations.GetPeopleIdWorkSecurity,
        options?: RequestOptions
    ): Promise<operations.GetPeopleIdWorkResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.GetPeopleIdWorkRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            id: enc$.encodeSimple("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };

        const path$ = this.templateURLComponent("/people/{id}/work")(pathParams$);

        const securitySettings$ = this.resolveSecurity(
            [{ value: security?.basic, type: "http:basic" }],
            [{ value: security?.bearer, fieldName: "Authorization", type: "apiKey:header" }]
        );

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetPeopleIdWorkResponse$.inboundSchema.parse({
                ...responseFields$,
                WorkEntries: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Creates a new employment entry for a given employee.
     *
     * @remarks
     * <b>Supported user types:</b> Employee, Service<br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How to work with lists Public API</a>.
     */
    async postPeopleIdEmployment(
        input: operations.PostPeopleIdEmploymentRequest,
        security: operations.PostPeopleIdEmploymentSecurity,
        options?: RequestOptions
    ): Promise<operations.PostPeopleIdEmploymentResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "*/*");

        const payload$ = operations.PostPeopleIdEmploymentRequest$.outboundSchema.parse(input);

        const body$ = enc$.encodeJSON("body", payload$.EmploymentEntry, { explode: true });

        const pathParams$ = {
            id: enc$.encodeSimple("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };

        const path$ = this.templateURLComponent("/people/{id}/employment")(pathParams$);

        const securitySettings$ = this.resolveSecurity(
            [{ value: security?.basic, type: "http:basic" }],
            [{ value: security?.bearer, fieldName: "Authorization", type: "apiKey:header" }]
        );

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 200)) {
            // fallthrough
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.PostPeopleIdEmploymentResponse$.inboundSchema.parse(responseFields$);
    }

    /**
     * Creates a new equity grant for a given employee.
     *
     * @remarks
     * <b>Supported user types:</b> Employee, Service<br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How to work with lists Public API</a>.
     */
    async postPeopleIdEquities(
        input: operations.PostPeopleIdEquitiesRequest,
        security: operations.PostPeopleIdEquitiesSecurity,
        options?: RequestOptions
    ): Promise<operations.PostPeopleIdEquitiesResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "*/*");

        const payload$ = operations.PostPeopleIdEquitiesRequest$.outboundSchema.parse(input);

        const body$ = enc$.encodeJSON("body", payload$.EquityEntry, { explode: true });

        const pathParams$ = {
            id: enc$.encodeSimple("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };

        const path$ = this.templateURLComponent("/people/{id}/equities")(pathParams$);

        const securitySettings$ = this.resolveSecurity(
            [{ value: security?.basic, type: "http:basic" }],
            [{ value: security?.bearer, fieldName: "Authorization", type: "apiKey:header" }]
        );

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 200)) {
            // fallthrough
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.PostPeopleIdEquitiesResponse$.inboundSchema.parse(responseFields$);
    }

    /**
     * Creates a new salary entry for a given employee.
     *
     * @remarks
     * <b>Supported user types:</b> Employee, Service<br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How to work with lists Public API</a>.
     */
    async postPeopleIdSalaries(
        input: operations.PostPeopleIdSalariesRequest,
        security: operations.PostPeopleIdSalariesSecurity,
        options?: RequestOptions
    ): Promise<operations.PostPeopleIdSalariesResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "*/*");

        const payload$ = operations.PostPeopleIdSalariesRequest$.outboundSchema.parse(input);

        const body$ = enc$.encodeJSON("body", payload$.SalaryEntry, { explode: true });

        const pathParams$ = {
            id: enc$.encodeSimple("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };

        const path$ = this.templateURLComponent("/people/{id}/salaries")(pathParams$);

        const securitySettings$ = this.resolveSecurity(
            [{ value: security?.basic, type: "http:basic" }],
            [{ value: security?.bearer, fieldName: "Authorization", type: "apiKey:header" }]
        );

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 200)) {
            // fallthrough
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.PostPeopleIdSalariesResponse$.inboundSchema.parse(responseFields$);
    }

    /**
     * Creates a new training records for a given employee
     *
     * @remarks
     * <b>Supported user types:</b> Employee, Service<br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How to work with lists Public API</a>.
     */
    async postPeopleIdTraining(
        input: operations.PostPeopleIdTrainingRequest,
        security: operations.PostPeopleIdTrainingSecurity,
        options?: RequestOptions
    ): Promise<operations.PostPeopleIdTrainingResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "*/*");

        const payload$ = operations.PostPeopleIdTrainingRequest$.outboundSchema.parse(input);

        const body$ = enc$.encodeJSON("body", payload$.TrainingEntry, { explode: true });

        const pathParams$ = {
            id: enc$.encodeSimple("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };

        const path$ = this.templateURLComponent("/people/{id}/training")(pathParams$);

        const securitySettings$ = this.resolveSecurity(
            [{ value: security?.basic, type: "http:basic" }],
            [{ value: security?.bearer, fieldName: "Authorization", type: "apiKey:header" }]
        );

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 200)) {
            // fallthrough
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.PostPeopleIdTrainingResponse$.inboundSchema.parse(responseFields$);
    }

    /**
     * Creates a new variable payment for a given employee.
     *
     * @remarks
     * <b>Supported user types:</b> Employee, Service<br><br><b>Note</b>:The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How to work with lists Public API</a>.
     */
    async postPeopleIdVariable(
        input: operations.PostPeopleIdVariableRequest,
        security: operations.PostPeopleIdVariableSecurity,
        options?: RequestOptions
    ): Promise<operations.PostPeopleIdVariableResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "*/*");

        const payload$ = operations.PostPeopleIdVariableRequest$.outboundSchema.parse(input);

        const body$ = enc$.encodeJSON("body", payload$.VariableEntry, { explode: true });

        const pathParams$ = {
            id: enc$.encodeSimple("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };

        const path$ = this.templateURLComponent("/people/{id}/variable")(pathParams$);

        const securitySettings$ = this.resolveSecurity(
            [{ value: security?.basic, type: "http:basic" }],
            [{ value: security?.bearer, fieldName: "Authorization", type: "apiKey:header" }]
        );

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 200)) {
            // fallthrough
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.PostPeopleIdVariableResponse$.inboundSchema.parse(responseFields$);
    }

    /**
     * Creates a new work entry for a given employee.
     *
     * @remarks
     * <b>Supported user types:</b> Employee, Service<br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How to work with lists Public API</a>.
     */
    async postPeopleIdWork(
        input: operations.PostPeopleIdWorkRequest,
        security: operations.PostPeopleIdWorkSecurity,
        options?: RequestOptions
    ): Promise<operations.PostPeopleIdWorkResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "*/*");

        const payload$ = operations.PostPeopleIdWorkRequest$.outboundSchema.parse(input);

        const body$ = enc$.encodeJSON("body", payload$.WorkEntry, { explode: true });

        const pathParams$ = {
            id: enc$.encodeSimple("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };

        const path$ = this.templateURLComponent("/people/{id}/work")(pathParams$);

        const securitySettings$ = this.resolveSecurity(
            [{ value: security?.basic, type: "http:basic" }],
            [{ value: security?.bearer, fieldName: "Authorization", type: "apiKey:header" }]
        );

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 200)) {
            // fallthrough
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.PostPeopleIdWorkResponse$.inboundSchema.parse(responseFields$);
    }

    /**
     * Updates an employment entry from a given employee's employment history.
     *
     * @remarks
     * <b>Supported user types:</b> Employee, Service.<br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How to work with lists Public API</a>.
     */
    async putPeopleIdEmploymentEntryId(
        input: operations.PutPeopleIdEmploymentEntryIdRequest,
        security: operations.PutPeopleIdEmploymentEntryIdSecurity,
        options?: RequestOptions
    ): Promise<operations.PutPeopleIdEmploymentEntryIdResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "*/*");

        const payload$ =
            operations.PutPeopleIdEmploymentEntryIdRequest$.outboundSchema.parse(input);

        const body$ = enc$.encodeJSON("body", payload$.EmploymentEntry, { explode: true });

        const pathParams$ = {
            entry_id: enc$.encodeSimple("entry_id", payload$.entry_id, {
                explode: false,
                charEncoding: "percent",
            }),
            id: enc$.encodeSimple("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };

        const path$ = this.templateURLComponent("/people/{id}/employment/{entry_id}")(pathParams$);

        const securitySettings$ = this.resolveSecurity(
            [{ value: security?.basic, type: "http:basic" }],
            [{ value: security?.bearer, fieldName: "Authorization", type: "apiKey:header" }]
        );

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "PUT",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 200)) {
            // fallthrough
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.PutPeopleIdEmploymentEntryIdResponse$.inboundSchema.parse(
            responseFields$
        );
    }

    /**
     * Updates an equity grant for an employee
     *
     * @remarks
     * <b>Supported user types:</b> Employee, Service<br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How to work with lists Public API</a>. - Basic: [] - Bearer: []
     */
    async putPeopleIdEquitiesEntryId(
        input: operations.PutPeopleIdEquitiesEntryIdRequest,
        security: operations.PutPeopleIdEquitiesEntryIdSecurity,
        options?: RequestOptions
    ): Promise<operations.PutPeopleIdEquitiesEntryIdResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "*/*");

        const payload$ = operations.PutPeopleIdEquitiesEntryIdRequest$.outboundSchema.parse(input);

        const body$ = enc$.encodeJSON("body", payload$.EquityEntry, { explode: true });

        const pathParams$ = {
            entry_id: enc$.encodeSimple("entry_id", payload$.entry_id, {
                explode: false,
                charEncoding: "percent",
            }),
            id: enc$.encodeSimple("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };

        const path$ = this.templateURLComponent("/people/{id}/equities/{entry_id}")(pathParams$);

        const securitySettings$ = this.resolveSecurity(
            [{ value: security?.basic, type: "http:basic" }],
            [{ value: security?.bearer, fieldName: "Authorization", type: "apiKey:header" }]
        );

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "PUT",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 200)) {
            // fallthrough
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.PutPeopleIdEquitiesEntryIdResponse$.inboundSchema.parse(responseFields$);
    }

    /**
     * Updates a work entry from employee's work history
     *
     * @remarks
     * <b>Supported user types:</b> Employee, Service<br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How to work with lists Public API</a>.
     */
    async putPeopleIdWorkEntryId(
        input: operations.PutPeopleIdWorkEntryIdRequest,
        security: operations.PutPeopleIdWorkEntryIdSecurity,
        options?: RequestOptions
    ): Promise<operations.PutPeopleIdWorkEntryIdResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "*/*");

        const payload$ = operations.PutPeopleIdWorkEntryIdRequest$.outboundSchema.parse(input);

        const body$ = enc$.encodeJSON("body", payload$.WorkEntry, { explode: true });

        const pathParams$ = {
            entry_id: enc$.encodeSimple("entry_id", payload$.entry_id, {
                explode: false,
                charEncoding: "percent",
            }),
            id: enc$.encodeSimple("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };

        const path$ = this.templateURLComponent("/people/{id}/work/{entry_id}")(pathParams$);

        const securitySettings$ = this.resolveSecurity(
            [{ value: security?.basic, type: "http:basic" }],
            [{ value: security?.bearer, fieldName: "Authorization", type: "apiKey:header" }]
        );

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "PUT",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, [200, 404])) {
            // fallthrough
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.PutPeopleIdWorkEntryIdResponse$.inboundSchema.parse(responseFields$);
    }
}
