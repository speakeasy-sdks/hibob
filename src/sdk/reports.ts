/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import * as enc$ from "../lib/encodings";
import { HTTPClient } from "../lib/http";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as errors from "../sdk/models/errors";
import * as operations from "../sdk/models/operations";

export class Reports extends ClientSDK {
    private readonly options$: SDKOptions;

    constructor(options: SDKOptions = {}) {
        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
        });

        this.options$ = options;
        void this.options$;
    }

    /**
     * Read company reports
     *
     * @remarks
     * Returns a list of all the defined company reports. The data is filtered based on the access level of the user. Only viewable categories are returned.<br />
     */
    async getCompanyReports(
        options?: RequestOptions
    ): Promise<operations.GetCompanyReportsResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const path$ = this.templateURLComponent("/company/reports")();

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            { security: securitySettings$, method: "GET", path: path$, headers: headers$ },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetCompanyReportsResponse$.inboundSchema.parse({
                ...responseFields$,
                Reports: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, "default", "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetCompanyReportsResponse$.inboundSchema.parse({
                ...responseFields$,
                Error: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Download report by file URL
     *
     * @remarks
     * Returns the report data file when it is ready. If the file is not ready yet the response will be 204. It will then have to try again.<br />(This URL is the response of the previous API: https://api.hibob.com/v1/company/reports/reportId/download-async)<br />
     */
    async getCompanyReportsDownloadReportName(
        input: operations.GetCompanyReportsDownloadReportNameRequest,
        options?: RequestOptions
    ): Promise<operations.GetCompanyReportsDownloadReportNameResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ =
            operations.GetCompanyReportsDownloadReportNameRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            reportName: enc$.encodeSimple("reportName", payload$.reportName, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/company/reports/download/{reportName}")(
            pathParams$
        );

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = response.body ?? undefined;
            const result =
                operations.GetCompanyReportsDownloadReportNameResponse$.inboundSchema.parse({
                    ...responseFields$,
                    stream: responseBody,
                });
            return result;
        } else if (this.matchStatusCode(response, 204)) {
            // fallthrough
        } else if (this.matchResponse(response, "default", "application/json")) {
            const responseBody = await response.json();
            const result =
                operations.GetCompanyReportsDownloadReportNameResponse$.inboundSchema.parse({
                    ...responseFields$,
                    Error: responseBody,
                });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.GetCompanyReportsDownloadReportNameResponse$.inboundSchema.parse(
            responseFields$
        );
    }

    /**
     * Download the report by ID
     *
     * @remarks
     * Returns a report data file in the specified format.<br /><b>Supported user types:</b> Service.
     */
    async getCompanyReportsReportIdDownload(
        input: operations.GetCompanyReportsReportIdDownloadRequest,
        options?: RequestOptions
    ): Promise<operations.GetCompanyReportsReportIdDownloadResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ =
            operations.GetCompanyReportsReportIdDownloadRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            reportId: enc$.encodeSimple("reportId", payload$.reportId, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/company/reports/{reportId}/download")(
            pathParams$
        );

        const query$ = [
            enc$.encodeForm("format", payload$.format, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("includeInfo", payload$.includeInfo, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("locale", payload$.locale, { explode: true, charEncoding: "percent" }),
        ]
            .filter(Boolean)
            .join("&");

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = response.body ?? undefined;
            const result =
                operations.GetCompanyReportsReportIdDownloadResponse$.inboundSchema.parse({
                    ...responseFields$,
                    stream: responseBody,
                });
            return result;
        } else if (this.matchResponse(response, "default", "application/json")) {
            const responseBody = await response.json();
            const result =
                operations.GetCompanyReportsReportIdDownloadResponse$.inboundSchema.parse({
                    ...responseFields$,
                    Error: responseBody,
                });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Get the report download URL for polling
     *
     * @remarks
     * Returns the polling URL report file of the specified format under "Location" in the response header.<br />
     */
    async getCompanyReportsReportIdDownloadAsync(
        input: operations.GetCompanyReportsReportIdDownloadAsyncRequest,
        options?: RequestOptions
    ): Promise<operations.GetCompanyReportsReportIdDownloadAsyncResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ =
            operations.GetCompanyReportsReportIdDownloadAsyncRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            reportId: enc$.encodeSimple("reportId", payload$.reportId, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/company/reports/{reportId}/download-async")(
            pathParams$
        );

        const query$ = [
            enc$.encodeForm("format", payload$.format, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("includeInfo", payload$.includeInfo, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("locale", payload$.locale, { explode: true, charEncoding: "percent" }),
        ]
            .filter(Boolean)
            .join("&");

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 200)) {
            // fallthrough
        } else if (this.matchResponse(response, "default", "application/json")) {
            const responseBody = await response.json();
            const result =
                operations.GetCompanyReportsReportIdDownloadAsyncResponse$.inboundSchema.parse({
                    ...responseFields$,
                    Error: responseBody,
                });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.GetCompanyReportsReportIdDownloadAsyncResponse$.inboundSchema.parse(
            responseFields$
        );
    }
}
