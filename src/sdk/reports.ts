/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks";
import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import * as enc$ from "../lib/encodings";
import { HTTPClient } from "../lib/http";
import * as schemas$ from "../lib/schemas";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as errors from "../sdk/models/errors";
import * as operations from "../sdk/models/operations";

export class Reports extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    /**
     * Read company reports
     *
     * @remarks
     * Returns a list of all the defined company reports. The data is filtered based on the access level of the user. Only viewable categories are returned.<br />
     */
    async getCompanyReports(
        options?: RequestOptions
    ): Promise<operations.GetCompanyReportsResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const path$ = this.templateURLComponent("/company/reports")();

        const query$ = "";

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "get_/company/reports",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: [] };
        const request = this.createRequest$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
            },
            options
        );

        const response = await this.do$(request, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = schemas$.parse(
                responseBody,
                (val$) => {
                    return operations.GetCompanyReportsResponse$.inboundSchema.parse({
                        ...responseFields$,
                        Reports: val$,
                    });
                },
                "Response validation failed"
            );
            return result;
        } else if (this.matchResponse(response, "default", "application/json")) {
            const responseBody = await response.json();
            const result = schemas$.parse(
                responseBody,
                (val$) => {
                    return operations.GetCompanyReportsResponse$.inboundSchema.parse({
                        ...responseFields$,
                        Error: val$,
                    });
                },
                "Response validation failed"
            );
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Download report by file URL
     *
     * @remarks
     * Returns the report data file when it is ready. If the file is not ready yet the response will be 204. It will then have to try again.<br />(This URL is the response of the previous API: https://api.hibob.com/v1/company/reports/reportId/download-async)<br />
     */
    async getCompanyReportsDownloadReportName(
        input: operations.GetCompanyReportsDownloadReportNameRequest,
        options?: RequestOptions
    ): Promise<operations.GetCompanyReportsDownloadReportNameResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input,
            (value$) =>
                operations.GetCompanyReportsDownloadReportNameRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            reportName: enc$.encodeSimple("reportName", payload$.reportName, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/company/reports/download/{reportName}")(
            pathParams$
        );

        const query$ = "";

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "get_/company/reports/download/{reportName}",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: [] };
        const request = this.createRequest$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = response.body ?? undefined;
            const result = schemas$.parse(
                responseBody,
                (val$) => {
                    return operations.GetCompanyReportsDownloadReportNameResponse$.inboundSchema.parse(
                        {
                            ...responseFields$,
                            stream: val$,
                        }
                    );
                },
                "Response validation failed"
            );
            return result;
        } else if (this.matchStatusCode(response, 204)) {
            // fallthrough
        } else if (this.matchResponse(response, "default", "application/json")) {
            const responseBody = await response.json();
            const result = schemas$.parse(
                responseBody,
                (val$) => {
                    return operations.GetCompanyReportsDownloadReportNameResponse$.inboundSchema.parse(
                        {
                            ...responseFields$,
                            Error: val$,
                        }
                    );
                },
                "Response validation failed"
            );
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return schemas$.parse(
            undefined,
            () =>
                operations.GetCompanyReportsDownloadReportNameResponse$.inboundSchema.parse(
                    responseFields$
                ),
            "Response validation failed"
        );
    }

    /**
     * Download the report by ID
     *
     * @remarks
     * Returns a report data file in the specified format.<br /><b>Supported user types:</b> Service.
     */
    async getCompanyReportsReportIdDownload(
        input: operations.GetCompanyReportsReportIdDownloadRequest,
        options?: RequestOptions
    ): Promise<operations.GetCompanyReportsReportIdDownloadResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input,
            (value$) =>
                operations.GetCompanyReportsReportIdDownloadRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            reportId: enc$.encodeSimple("reportId", payload$.reportId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/company/reports/{reportId}/download")(
            pathParams$
        );

        const query$ = [
            enc$.encodeForm("format", payload$.format, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("humanReadable", payload$.humanReadable, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("includeInfo", payload$.includeInfo, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("locale", payload$.locale, { explode: true, charEncoding: "percent" }),
        ]
            .filter(Boolean)
            .join("&");

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "get_/company/reports/{reportId}/download",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: [] };
        const request = this.createRequest$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = response.body ?? undefined;
            const result = schemas$.parse(
                responseBody,
                (val$) => {
                    return operations.GetCompanyReportsReportIdDownloadResponse$.inboundSchema.parse(
                        {
                            ...responseFields$,
                            stream: val$,
                        }
                    );
                },
                "Response validation failed"
            );
            return result;
        } else if (this.matchResponse(response, "default", "application/json")) {
            const responseBody = await response.json();
            const result = schemas$.parse(
                responseBody,
                (val$) => {
                    return operations.GetCompanyReportsReportIdDownloadResponse$.inboundSchema.parse(
                        {
                            ...responseFields$,
                            Error: val$,
                        }
                    );
                },
                "Response validation failed"
            );
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Get the report download URL for polling
     *
     * @remarks
     * Returns the polling URL report file of the specified format under "Location" in the response header.<br />
     */
    async getCompanyReportsReportIdDownloadAsync(
        input: operations.GetCompanyReportsReportIdDownloadAsyncRequest,
        options?: RequestOptions
    ): Promise<operations.GetCompanyReportsReportIdDownloadAsyncResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input,
            (value$) =>
                operations.GetCompanyReportsReportIdDownloadAsyncRequest$.outboundSchema.parse(
                    value$
                ),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            reportId: enc$.encodeSimple("reportId", payload$.reportId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/company/reports/{reportId}/download-async")(
            pathParams$
        );

        const query$ = [
            enc$.encodeForm("format", payload$.format, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("humanReadable", payload$.humanReadable, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("includeInfo", payload$.includeInfo, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("locale", payload$.locale, { explode: true, charEncoding: "percent" }),
        ]
            .filter(Boolean)
            .join("&");

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "get_/company/reports/{reportId}/download-async",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: [] };
        const request = this.createRequest$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 200)) {
            // fallthrough
        } else if (this.matchResponse(response, "default", "application/json")) {
            const responseBody = await response.json();
            const result = schemas$.parse(
                responseBody,
                (val$) => {
                    return operations.GetCompanyReportsReportIdDownloadAsyncResponse$.inboundSchema.parse(
                        {
                            ...responseFields$,
                            Error: val$,
                        }
                    );
                },
                "Response validation failed"
            );
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return schemas$.parse(
            undefined,
            () =>
                operations.GetCompanyReportsReportIdDownloadAsyncResponse$.inboundSchema.parse(
                    responseFields$
                ),
            "Response validation failed"
        );
    }
}
