/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import * as enc$ from "../lib/encodings";
import { HTTPClient } from "../lib/http";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as errors from "../sdk/models/errors";
import * as operations from "../sdk/models/operations";

export class TimeOff extends ClientSDK {
    private readonly options$: SDKOptions;

    constructor(options: SDKOptions = {}) {
        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
        });

        this.options$ = options;
        void this.options$;
    }

    /**
     * Cancel an existing timeoff request
     *
     * @remarks
     * Cancels an existing time off request.<br />
     */
    async deleteTimeoffEmployeesIdRequestsRequestId(
        input: operations.DeleteTimeoffEmployeesIdRequestsRequestIdRequest,
        options?: RequestOptions
    ): Promise<operations.DeleteTimeoffEmployeesIdRequestsRequestIdResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "*/*");

        const payload$ =
            operations.DeleteTimeoffEmployeesIdRequestsRequestIdRequest$.outboundSchema.parse(
                input
            );
        const body$ = null;

        const pathParams$ = {
            id: enc$.encodeSimple("id", payload$.id, { explode: false, charEncoding: "percent" }),
            requestId: enc$.encodeSimple("requestId", payload$.requestId, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/timeoff/employees/{id}/requests/{requestId}")(
            pathParams$
        );

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "DELETE",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 200)) {
            // fallthrough
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.DeleteTimeoffEmployeesIdRequestsRequestIdResponse$.inboundSchema.parse(
            responseFields$
        );
    }

    /**
     * Get the balance for a given employee
     *
     * @remarks
     * Retrieve the balance for a given employee, for a given policy type, as of a given date.<br />
     */
    async getTimeoffEmployeesIdBalance(
        input: operations.GetTimeoffEmployeesIdBalanceRequest,
        options?: RequestOptions
    ): Promise<operations.GetTimeoffEmployeesIdBalanceResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ =
            operations.GetTimeoffEmployeesIdBalanceRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            id: enc$.encodeSimple("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };

        const path$ = this.templateURLComponent("/timeoff/employees/{id}/balance")(pathParams$);

        const query$ = [
            enc$.encodeForm("date", payload$.date, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("policyType", payload$.policyType, {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetTimeoffEmployeesIdBalanceResponse$.inboundSchema.parse({
                ...responseFields$,
                BalanceResult: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, "default", "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetTimeoffEmployeesIdBalanceResponse$.inboundSchema.parse({
                ...responseFields$,
                Error: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Get the details of an existing timeoff request.
     *
     * @remarks
     * Supplies detailed info about an existing time off request.<br />
     */
    async getTimeoffEmployeesIdRequestsRequestId(
        input: operations.GetTimeoffEmployeesIdRequestsRequestIdRequest,
        options?: RequestOptions
    ): Promise<operations.GetTimeoffEmployeesIdRequestsRequestIdResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ =
            operations.GetTimeoffEmployeesIdRequestsRequestIdRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            id: enc$.encodeSimple("id", payload$.id, { explode: false, charEncoding: "percent" }),
            requestId: enc$.encodeSimple("requestId", payload$.requestId, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/timeoff/employees/{id}/requests/{requestId}")(
            pathParams$
        );

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result =
                operations.GetTimeoffEmployeesIdRequestsRequestIdResponse$.inboundSchema.parse({
                    ...responseFields$,
                    TimeoffRequest: responseBody,
                });
            return result;
        } else if (this.matchStatusCode(response, 404)) {
            // fallthrough
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.GetTimeoffEmployeesIdRequestsRequestIdResponse$.inboundSchema.parse(
            responseFields$
        );
    }

    /**
     * Read a list of who's out of the office today or on the specified date.
     *
     * @remarks
     * Returns the list of people that have a time off request today or on the specified date.<br />
     */
    async getTimeoffOuttoday(
        input: operations.GetTimeoffOuttodayRequest,
        options?: RequestOptions
    ): Promise<operations.GetTimeoffOuttodayResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.GetTimeoffOuttodayRequest$.outboundSchema.parse(input);
        const body$ = null;

        const path$ = this.templateURLComponent("/timeoff/outtoday")();

        const query$ = [
            enc$.encodeForm("includeHourly", payload$.includeHourly, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("includePrivate", payload$.includePrivate, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("siteId", payload$.siteId, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("today", payload$.today, { explode: true, charEncoding: "percent" }),
        ]
            .filter(Boolean)
            .join("&");

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetTimeoffOuttodayResponse$.inboundSchema.parse({
                ...responseFields$,
                OutTodays: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, "default", "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetTimeoffOuttodayResponse$.inboundSchema.parse({
                ...responseFields$,
                Error: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Get Policy details.
     *
     * @remarks
     * Get details about a given policy.<br />
     */
    async getTimeoffPolicies(
        input: operations.GetTimeoffPoliciesRequest,
        options?: RequestOptions
    ): Promise<operations.GetTimeoffPoliciesResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.GetTimeoffPoliciesRequest$.outboundSchema.parse(input);
        const body$ = null;

        const path$ = this.templateURLComponent("/timeoff/policies")();

        const query$ = [
            enc$.encodeForm("policyName", payload$.policyName, {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetTimeoffPoliciesResponse$.inboundSchema.parse({
                ...responseFields$,
                Policy: responseBody,
            });
            return result;
        } else if (this.matchStatusCode(response, 404)) {
            // fallthrough
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.GetTimeoffPoliciesResponse$.inboundSchema.parse(responseFields$);
    }

    /**
     * Get a list of policy names for a given policy type.
     *
     * @remarks
     * Get a list of policy names for the user's defined policy type.<br />
     */
    async getTimeoffPoliciesNames(
        input: operations.GetTimeoffPoliciesNamesRequest,
        options?: RequestOptions
    ): Promise<operations.GetTimeoffPoliciesNamesResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.GetTimeoffPoliciesNamesRequest$.outboundSchema.parse(input);
        const body$ = null;

        const path$ = this.templateURLComponent("/timeoff/policies/names")();

        const query$ = [
            enc$.encodeForm("policyTypeName", payload$.policyTypeName, {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetTimeoffPoliciesNamesResponse$.inboundSchema.parse({
                ...responseFields$,
                PolicyNames: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Get all policy types names.
     *
     * @remarks
     * Get a list of all policy type names.<br />
     */
    async getTimeoffPolicyTypes(
        options?: RequestOptions
    ): Promise<operations.GetTimeoffPolicyTypesResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const path$ = this.templateURLComponent("/timeoff/policy-types")();

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            { security: securitySettings$, method: "GET", path: path$, headers: headers$ },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetTimeoffPolicyTypesResponse$.inboundSchema.parse({
                ...responseFields$,
                PolicyTypes: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, "default", "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetTimeoffPolicyTypesResponse$.inboundSchema.parse({
                ...responseFields$,
                Error: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Get Policy type details
     *
     * @remarks
     * Get details about a given policy type.<br />
     */
    async getTimeoffPolicyTypesPolicyType(
        input: operations.GetTimeoffPolicyTypesPolicyTypeRequest,
        options?: RequestOptions
    ): Promise<operations.GetTimeoffPolicyTypesPolicyTypeResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ =
            operations.GetTimeoffPolicyTypesPolicyTypeRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            policyType: enc$.encodeSimple("policyType", payload$.policyType, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/timeoff/policy-types/{policyType}")(pathParams$);

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetTimeoffPolicyTypesPolicyTypeResponse$.inboundSchema.parse({
                ...responseFields$,
                PolicyType: responseBody,
            });
            return result;
        } else if (this.matchStatusCode(response, 404)) {
            // fallthrough
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.GetTimeoffPolicyTypesPolicyTypeResponse$.inboundSchema.parse(
            responseFields$
        );
    }

    /**
     * Get Policy type reason codes
     *
     * @remarks
     * Get list of reason codes for a given policy type.<br />
     */
    async getTimeoffPolicyTypesPolicyTypeReasonCodes(
        input: operations.GetTimeoffPolicyTypesPolicyTypeReasonCodesRequest,
        options?: RequestOptions
    ): Promise<operations.GetTimeoffPolicyTypesPolicyTypeReasonCodesResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ =
            operations.GetTimeoffPolicyTypesPolicyTypeReasonCodesRequest$.outboundSchema.parse(
                input
            );
        const body$ = null;

        const pathParams$ = {
            policyType: enc$.encodeSimple("policyType", payload$.policyType, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/timeoff/policy-types/{policyType}/reason-codes")(
            pathParams$
        );

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result =
                operations.GetTimeoffPolicyTypesPolicyTypeReasonCodesResponse$.inboundSchema.parse({
                    ...responseFields$,
                    ReasonCodes: responseBody,
                });
            return result;
        } else if (this.matchStatusCode(response, 404)) {
            // fallthrough
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.GetTimeoffPolicyTypesPolicyTypeReasonCodesResponse$.inboundSchema.parse(
            responseFields$
        );
    }

    /**
     * Get all new/deleted time off requests since the specified date.
     *
     * @remarks
     * Returns the list of time off requests that are pending, approved or canceled since the specified date.<br />
     */
    async getTimeoffRequestsChanges(
        input: operations.GetTimeoffRequestsChangesRequest,
        options?: RequestOptions
    ): Promise<operations.GetTimeoffRequestsChangesResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.GetTimeoffRequestsChangesRequest$.outboundSchema.parse(input);
        const body$ = null;

        const path$ = this.templateURLComponent("/timeoff/requests/changes")();

        const query$ = [
            enc$.encodeForm("includePending", payload$.includePending, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("since", payload$.since, { explode: true, charEncoding: "percent" }),
        ]
            .filter(Boolean)
            .join("&");

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetTimeoffRequestsChangesResponse$.inboundSchema.parse({
                ...responseFields$,
                TimeoffChanges: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Read a list of who's out of the office.
     *
     * @remarks
     * Returns time off information for a given date range.<br /><b>Supported user types:</b> Service.
     */
    async getTimeoffWhosout(
        input: operations.GetTimeoffWhosoutRequest,
        options?: RequestOptions
    ): Promise<operations.GetTimeoffWhosoutResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.GetTimeoffWhosoutRequest$.outboundSchema.parse(input);
        const body$ = null;

        const path$ = this.templateURLComponent("/timeoff/whosout")();

        const query$ = [
            enc$.encodeForm("from", payload$.from, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("includeHourly", payload$.includeHourly, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("includePending", payload$.includePending, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("includePrivate", payload$.includePrivate, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("to", payload$.to, { explode: true, charEncoding: "percent" }),
        ]
            .filter(Boolean)
            .join("&");

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetTimeoffWhosoutResponse$.inboundSchema.parse({
                ...responseFields$,
                Requests: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, "default", "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetTimeoffWhosoutResponse$.inboundSchema.parse({
                ...responseFields$,
                Error: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Create a balance adjustment.
     *
     * @remarks
     * Create a balance adjustment for a given employee for a given effective date.<br />
     */
    async postTimeoffEmployeesIdAdjustments(
        input: operations.PostTimeoffEmployeesIdAdjustmentsRequest,
        options?: RequestOptions
    ): Promise<operations.PostTimeoffEmployeesIdAdjustmentsResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ =
            operations.PostTimeoffEmployeesIdAdjustmentsRequest$.outboundSchema.parse(input);

        const body$ = enc$.encodeJSON("body", payload$.AdjustmentRequest, { explode: true });

        const pathParams$ = {
            id: enc$.encodeSimple("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };

        const path$ = this.templateURLComponent("/timeoff/employees/{id}/adjustments")(pathParams$);

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 200)) {
            // fallthrough
        } else if (this.matchResponse(response, "default", "application/json")) {
            const responseBody = await response.json();
            const result =
                operations.PostTimeoffEmployeesIdAdjustmentsResponse$.inboundSchema.parse({
                    ...responseFields$,
                    Error: responseBody,
                });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.PostTimeoffEmployeesIdAdjustmentsResponse$.inboundSchema.parse(
            responseFields$
        );
    }

    /**
     * Submit a new time off request.
     *
     * @remarks
     * Submits a new timeoff request.<br />
     */
    async postTimeoffEmployeesIdRequests(
        input: operations.PostTimeoffEmployeesIdRequestsRequest,
        options?: RequestOptions
    ): Promise<operations.PostTimeoffEmployeesIdRequestsResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "*/*");

        const payload$ =
            operations.PostTimeoffEmployeesIdRequestsRequest$.outboundSchema.parse(input);

        const body$ = enc$.encodeJSON("body", payload$.SubmitTimeoffRequest, { explode: true });

        const pathParams$ = {
            id: enc$.encodeSimple("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };

        const path$ = this.templateURLComponent("/timeoff/employees/{id}/requests")(pathParams$);

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 200)) {
            // fallthrough
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.PostTimeoffEmployeesIdRequestsResponse$.inboundSchema.parse(
            responseFields$
        );
    }

    /**
     * Add a list of reason codes for a given policy type.
     *
     * @remarks
     * Add a list of reason codes for a given policy type.<br /><b>Supported user types:</b> Service.
     */
    async postTimeoffPolicyTypesPolicyTypeReasonCodes(
        input: operations.PostTimeoffPolicyTypesPolicyTypeReasonCodesRequest,
        options?: RequestOptions
    ): Promise<operations.PostTimeoffPolicyTypesPolicyTypeReasonCodesResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "*/*");

        const payload$ =
            operations.PostTimeoffPolicyTypesPolicyTypeReasonCodesRequest$.outboundSchema.parse(
                input
            );

        const body$ = enc$.encodeJSON("body", payload$.ReasonCodesNames, { explode: true });

        const pathParams$ = {
            policyType: enc$.encodeSimple("policyType", payload$.policyType, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/timeoff/policy-types/{policyType}/reason-codes")(
            pathParams$
        );

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, [200, 404])) {
            // fallthrough
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.PostTimeoffPolicyTypesPolicyTypeReasonCodesResponse$.inboundSchema.parse(
            responseFields$
        );
    }
}
